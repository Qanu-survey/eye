pfx('sudoku:', '<http://josd.github.io/eye/reasoning/sudoku#>').

'<http://josd.github.io/eye/reasoning/sudoku#solve>'(Problem, Rows) :-
    problem(Problem, Rows),
    forall(
        (   between(0, 8, I)
        ),
        (   nth0(I, Rows, Row),
            forall(
                (   between(0, 8, J)
                ),
                (   nth0(J, Row, N),
                    assertz(grid(I, J, N))
                )
            )
        )
    ),
    sudoku(0, 0),
    findall(
        Row,
        (   between(0, 8, I),
            findall(
                N,
                (   between(0, 8, J),
                    retract(grid(I, J, N))
                ),
                Row
            )
        ),
        Rows
    ).

sudoku(Row, Col) :-
    grid(Row, Col, Num),
    nonvar(Num),
    !,
    (   Colp1 is Col+1,
        Colp1 < 9
    ->  sudoku(Row, Colp1)
    ;   (   Rowp1 is Row+1,
            Rowp1 < 9
        ->  sudoku(Rowp1, 0)
        ;   true
        )
    ).
sudoku(Row, Col) :-
    between(1, 9, I),
    available(Row, Col, I),
    retract(grid(Row, Col, _)),
    assertz(grid(Row, Col, I)),
    (   Colp1 is Col+1,
        Colp1 < 9
    ->  (   sudoku(Row, Colp1)
        ->  true
        ;   retract(grid(Row, Col, _)),
            assertz(grid(Row, Col, _)),
            fail
        )
    ;   (   Rowp1 is Row+1,
            Rowp1 < 9
        ->  (   sudoku(Rowp1, 0)
            ->  true
            ;   retract(grid(Row, Col, _)),
                assertz(grid(Row, Col, _)),
                fail
            )
        ;   true
        )
    ).

available(Row, Col, Num) :-
    forall(
        (   between(0, 8, I)
        ),
        (   \+ (grid(Row, I, N), nonvar(N), N = Num),
            \+ (grid(I, Col, N), nonvar(N), N = Num),
            Rb is div(Row, 3)*3+mod(I, 3),
            Cb is div(Col, 3)*3+div(I, 3),
            \+ (grid(Rb, Cb, N), nonvar(N), N = Num)
        )
    ).

problem(1, [[8,_,_,4,_,5,_,_,_],
            [6,_,4,_,_,_,_,_,1],
            [_,_,_,_,1,_,_,_,2],
            [_,3,7,2,_,_,_,_,_],
            [_,_,_,_,5,1,_,_,9],
            [_,_,_,_,_,4,_,3,_],
            [9,_,2,_,_,8,1,_,7],
            [7,_,_,_,_,_,_,_,_],
            [_,_,1,_,_,2,_,_,_]]).

problem(2, [[4,_,_,_,_,8,5,_,_],
            [6,_,_,_,1,5,9,_,_],
            [5,_,1,_,_,_,_,_,_],
            [_,7,_,_,2,4,_,_,_],
            [_,_,_,_,_,_,_,9,_],
            [9,_,5,3,_,6,_,_,8],
            [3,_,_,_,_,_,_,8,7],
            [_,_,_,_,_,_,6,_,_],
            [_,9,6,_,_,_,4,_,1]]).
