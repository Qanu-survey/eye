#Processed by EYE v19.0723.1200 josd
#eye --plugin http://josd.github.io/eye/reasoning/sudoku/sudoku_program.eyepl --query http://josd.github.io/eye/reasoning/sudoku/sudoku_query.n3

PREFIX sudoku: <http://josd.github.io/eye/reasoning/sudoku#>
PREFIX r: <http://www.w3.org/2000/10/swap/reason#>

[] a r:Proof, r:Conjunction;
  r:component <#lemma1>;
  r:component <#lemma2>;
  r:gives {
    1 sudoku:solve ((8 1 3 4 2 5 7 9 6) (6 2 4 8 9 7 3 5 1) (5 7 9 6 1 3 8 4 2) (4 3 7 2 8 9 6 1 5) (2 8 6 3 5 1 4 7 9) (1 9 5 7 6 4 2 3 8) (9 4 2 5 3 8 1 6 7) (7 5 8 1 4 6 9 2 3) (3 6 1 9 7 2 5 8 4)).
    2 sudoku:solve ((4 3 9 7 6 8 5 1 2) (6 8 7 2 1 5 9 4 3) (5 2 1 4 9 3 8 7 6) (1 7 8 9 2 4 3 6 5) (2 6 3 5 8 1 7 9 4) (9 4 5 3 7 6 1 2 8) (3 1 4 6 5 9 2 8 7) (8 5 2 1 4 7 6 3 9) (7 9 6 8 3 2 4 5 1)).
  }.

<#lemma1> a r:Inference;
  r:gives {
    1 sudoku:solve ((8 1 3 4 2 5 7 9 6) (6 2 4 8 9 7 3 5 1) (5 7 9 6 1 3 8 4 2) (4 3 7 2 8 9 6 1 5) (2 8 6 3 5 1 4 7 9) (1 9 5 7 6 4 2 3 8) (9 4 2 5 3 8 1 6 7) (7 5 8 1 4 6 9 2 3) (3 6 1 9 7 2 5 8 4)).
  };
  r:evidence (
    <#lemma3>
  );
  r:rule <#lemma4>.

<#lemma2> a r:Inference;
  r:gives {
    2 sudoku:solve ((4 3 9 7 6 8 5 1 2) (6 8 7 2 1 5 9 4 3) (5 2 1 4 9 3 8 7 6) (1 7 8 9 2 4 3 6 5) (2 6 3 5 8 1 7 9 4) (9 4 5 3 7 6 1 2 8) (3 1 4 6 5 9 2 8 7) (8 5 2 1 4 7 6 3 9) (7 9 6 8 3 2 4 5 1)).
  };
  r:evidence (
    <#lemma5>
  );
  r:rule <#lemma4>.

<#lemma3> a r:Inference;
  r:gives {
    1 sudoku:solve ((8 1 3 4 2 5 7 9 6) (6 2 4 8 9 7 3 5 1) (5 7 9 6 1 3 8 4 2) (4 3 7 2 8 9 6 1 5) (2 8 6 3 5 1 4 7 9) (1 9 5 7 6 4 2 3 8) (9 4 2 5 3 8 1 6 7) (7 5 8 1 4 6 9 2 3) (3 6 1 9 7 2 5 8 4)).
  };
  r:evidence (
    <#lemma6>
    [ a r:Fact; r:gives {"forall(between(0,8,some0),(nth0(some0,[[8,1,3,4,2,5,7,9,6],[6,2,4,8,9,7,3,5,1],[5,7,9,6,1,3,8,4,2],[4,3,7,2,8,9,6,1,5],[2,8,6,3,5,1,4,7,9],[1,9,5,7,6,4,2,3,8],[9,4,2,5,3,8,1,6,7],[7,5,8,1,4,6,9,2,3],[3,6,1,9,7,2,5,8,4]],some1),forall(between(0,8,some2),(nth0(some2,some1,some3),assertz(grid(some0,some2,some3))))))"}]
    <#lemma7>
    [ a r:Fact; r:gives {"findall(some1,(between(0,8,some0),findall(some3,(between(0,8,some2),retract(grid(some0,some2,some3))),some1)),[[8,1,3,4,2,5,7,9,6],[6,2,4,8,9,7,3,5,1],[5,7,9,6,1,3,8,4,2],[4,3,7,2,8,9,6,1,5],[2,8,6,3,5,1,4,7,9],[1,9,5,7,6,4,2,3,8],[9,4,2,5,3,8,1,6,7],[7,5,8,1,4,6,9,2,3],[3,6,1,9,7,2,5,8,4]])"}]
  );
  r:rule [ a r:Fact; r:gives {{_:x_0_1 sudoku:solve _:x_1_1} <= {"problem(avar0,avar1)".
    "forall(between(0,8,avar2),(nth0(avar2,avar1,avar3),forall(between(0,8,avar4),(nth0(avar4,avar3,avar5),assertz(grid(avar2,avar4,avar5))))))".
    "sudoku(0,0)" .
    "findall(avar3,(between(0,8,avar2),findall(avar5,(between(0,8,avar4),retract(grid(avar2,avar4,avar5))),avar3)),avar1)"}}].

<#lemma4> a r:Extraction;
  r:gives {
    {?x_0_2 sudoku:solve ?x_1_2} => {?x_0_2 sudoku:solve ?x_1_2}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/sudoku/sudoku_query.n3>].

<#lemma5> a r:Inference;
  r:gives {
    2 sudoku:solve ((4 3 9 7 6 8 5 1 2) (6 8 7 2 1 5 9 4 3) (5 2 1 4 9 3 8 7 6) (1 7 8 9 2 4 3 6 5) (2 6 3 5 8 1 7 9 4) (9 4 5 3 7 6 1 2 8) (3 1 4 6 5 9 2 8 7) (8 5 2 1 4 7 6 3 9) (7 9 6 8 3 2 4 5 1)).
  };
  r:evidence (
    <#lemma8>
    [ a r:Fact; r:gives {"forall(between(0,8,some0),(nth0(some0,[[4,3,9,7,6,8,5,1,2],[6,8,7,2,1,5,9,4,3],[5,2,1,4,9,3,8,7,6],[1,7,8,9,2,4,3,6,5],[2,6,3,5,8,1,7,9,4],[9,4,5,3,7,6,1,2,8],[3,1,4,6,5,9,2,8,7],[8,5,2,1,4,7,6,3,9],[7,9,6,8,3,2,4,5,1]],some1),forall(between(0,8,some2),(nth0(some2,some1,some3),assertz(grid(some0,some2,some3))))))"}]
    <#lemma7>
    [ a r:Fact; r:gives {"findall(some1,(between(0,8,some0),findall(some3,(between(0,8,some2),retract(grid(some0,some2,some3))),some1)),[[4,3,9,7,6,8,5,1,2],[6,8,7,2,1,5,9,4,3],[5,2,1,4,9,3,8,7,6],[1,7,8,9,2,4,3,6,5],[2,6,3,5,8,1,7,9,4],[9,4,5,3,7,6,1,2,8],[3,1,4,6,5,9,2,8,7],[8,5,2,1,4,7,6,3,9],[7,9,6,8,3,2,4,5,1]])"}]
  );
  r:rule [ a r:Fact; r:gives {{_:x_0_3 sudoku:solve _:x_1_3} <= {"problem(avar0,avar1)".
    "forall(between(0,8,avar2),(nth0(avar2,avar1,avar3),forall(between(0,8,avar4),(nth0(avar4,avar3,avar5),assertz(grid(avar2,avar4,avar5))))))".
    "sudoku(0,0)" .
    "findall(avar3,(between(0,8,avar2),findall(avar5,(between(0,8,avar4),retract(grid(avar2,avar4,avar5))),avar3)),avar1)"}}].

<#lemma6> a r:Extraction;
  r:gives {
    "problem(1,[[8,1,3,4,2,5,7,9,6],[6,2,4,8,9,7,3,5,1],[5,7,9,6,1,3,8,4,2],[4,3,7,2,8,9,6,1,5],[2,8,6,3,5,1,4,7,9],[1,9,5,7,6,4,2,3,8],[9,4,2,5,3,8,1,6,7],[7,5,8,1,4,6,9,2,3],[3,6,1,9,7,2,5,8,4]])".
  };
  r:because [ a r:Parsing; r:source <>].

<#lemma7> a r:Inference;
  r:gives {
    "sudoku(0,0)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {"grid(0,0,8)"}]
    [ a r:Fact; r:gives {"nonvar(8)"}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    [ a r:Fact; r:gives {"1 is 0+1,1<9->sudoku(0,1);some0 is 0+1,some0<9->sudoku(some0,0);true"}]
  );
  r:rule [ a r:Fact; r:gives {"sudoku(avar0,avar1)" <= {"grid(avar0,avar1,avar2)".
    "nonvar(avar2)".
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "avar3 is avar1+1,avar3<9->sudoku(avar0,avar3);avar4 is avar0+1,avar4<9->sudoku(avar4,0);true"}}].

<#lemma8> a r:Extraction;
  r:gives {
    "problem(2,[[4,3,9,7,6,8,5,1,2],[6,8,7,2,1,5,9,4,3],[5,2,1,4,9,3,8,7,6],[1,7,8,9,2,4,3,6,5],[2,6,3,5,8,1,7,9,4],[9,4,5,3,7,6,1,2,8],[3,1,4,6,5,9,2,8,7],[8,5,2,1,4,7,6,3,9],[7,9,6,8,3,2,4,5,1]])".
  };
  r:because [ a r:Parsing; r:source <>].

#2019-08-13T11:34:44.604Z in=1 out=2 ent=2 step=2 brake=1 inf=4962979 sec=3.037 inf/sec=1634172
#ENDS

