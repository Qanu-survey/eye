#Processed by EYE v19.0814.1148 josd
#eye --plugin http://josd.github.io/eye/reasoning/enigma1225/enigma1225_program.eyepl --query http://josd.github.io/eye/reasoning/enigma1225/enigma1225_query.n3

PREFIX enigma: <http://josd.github.io/eye/reasoning/enigma#>
PREFIX r: <http://www.w3.org/2000/10/swap/reason#>

[] a r:Proof, r:Conjunction;
  r:component <#lemma1>;
  r:gives {
    (10 (2 1 4 3 6 5 8 7 10 9)) enigma:solve (((1 1 2 3 4 5 6 7 8 9) (1 1 3 2 5 4 7 6 9 8) (3 2 10 10 11 12 13 14 15 16) (2 3 10 10 12 11 14 13 16 15) (5 4 12 11 17 17 18 19 20 21) (4 5 11 12 17 17 19 18 21 20) (7 6 14 13 19 18 22 22 23 24) (6 7 13 14 18 19 22 22 24 23) (9 8 16 15 21 20 24 23 25 25) (8 9 15 16 20 21 23 24 25 25)) 1300).
  }.

<#lemma1> a r:Inference;
  r:gives {
    (10 (2 1 4 3 6 5 8 7 10 9)) enigma:solve (((1 1 2 3 4 5 6 7 8 9) (1 1 3 2 5 4 7 6 9 8) (3 2 10 10 11 12 13 14 15 16) (2 3 10 10 12 11 14 13 16 15) (5 4 12 11 17 17 18 19 20 21) (4 5 11 12 17 17 19 18 21 20) (7 6 14 13 19 18 22 22 23 24) (6 7 13 14 18 19 22 22 24 23) (9 8 16 15 21 20 24 23 25 25) (8 9 15 16 20 21 23 24 25 25)) 1300).
  };
  r:evidence (
    <#lemma2>
  );
  r:rule <#lemma3>.

<#lemma2> a r:Inference;
  r:gives {
    (10 (2 1 4 3 6 5 8 7 10 9)) enigma:solve (((1 1 2 3 4 5 6 7 8 9) (1 1 3 2 5 4 7 6 9 8) (3 2 10 10 11 12 13 14 15 16) (2 3 10 10 12 11 14 13 16 15) (5 4 12 11 17 17 18 19 20 21) (4 5 11 12 17 17 19 18 21 20) (7 6 14 13 19 18 22 22 23 24) (6 7 13 14 18 19 22 22 24 23) (9 8 16 15 21 20 24 23 25 25) (8 9 15 16 20 21 23 24 25 25)) 1300).
  };
  r:evidence (
    [ a r:Fact; r:gives {"setof(some0,some1^some2^some3^square(10,some1,some0,some2,some3),[300,436,480,540,645,712,724,799,999,1044,1300])"}]
    [ a r:Fact; r:gives {"last([300,436,480,540,645,712,724,799,999,1044,1300],1300)"}]
    <#lemma4>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_4_1 _:x_9_1) enigma:solve (_:x_7_1 _:x_6_1)} <= {"setof(avar0,avar1^avar2^avar3^square(avar4,avar1,avar0,avar2,avar3),avar5)".
    "last(avar5,avar6)".
    "square(avar4,avar7,avar6,avar8,avar9)"}}].

<#lemma3> a r:Extraction;
  r:gives {
    {(10 ?x_0_2) enigma:solve (?x_1_2 ?x_2_2)} => {(10 ?x_0_2) enigma:solve (?x_1_2 ?x_2_2)}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/enigma1225/enigma1225_query.n3>].

<#lemma4> a r:Inference;
  r:gives {
    "square(10,[[1,1,2,3,4,5,6,7,8,9],[1,1,3,2,5,4,7,6,9,8],[3,2,10,10,11,12,13,14,15,16],[2,3,10,10,12,11,14,13,16,15],[5,4,12,11,17,17,18,19,20,21],[4,5,11,12,17,17,19,18,21,20],[7,6,14,13,19,18,22,22,23,24],[6,7,13,14,18,19,22,22,24,23],[9,8,16,15,21,20,24,23,25,25],[8,9,15,16,20,21,23,24,25,25]],1300,[(4,1),(4,2),(4,3),(4,4),(4,5),(4,6),(4,7),(4,8),(4,9),(4,10),(4,11),(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],[2,1,4,3,6,5,8,7,10,9])".
  };
  r:evidence (
    <#lemma5>
    <#lemma6>
    <#lemma7>
    <#lemma8>
    <#lemma9>
    <#lemma10>
    <#lemma11>
    <#lemma12>
  );
  r:rule [ a r:Fact; r:gives {"square(avar0,avar1,avar6,avar5,avar3)" <= {"var_matrix(avar0,avar1)".
    "ad_partition(avar0,avar2)".
    "rep_perm(avar0,avar2,avar3)".
    "list_permute(avar3,avar1,avar4)".
    "transpose(avar4,avar1)".
    "distinct(avar1)".
    "eval_matrix(avar1,avar5)".
    "total(avar5,avar6)"}}].

<#lemma5> a r:Inference;
  r:gives {
    "var_matrix(10,[[1,1,2,3,4,5,6,7,8,9],[1,1,3,2,5,4,7,6,9,8],[3,2,10,10,11,12,13,14,15,16],[2,3,10,10,12,11,14,13,16,15],[5,4,12,11,17,17,18,19,20,21],[4,5,11,12,17,17,19,18,21,20],[7,6,14,13,19,18,22,22,23,24],[6,7,13,14,18,19,22,22,24,23],[9,8,16,15,21,20,24,23,25,25],[8,9,15,16,20,21,23,24,25,25]])".
  };
  r:evidence (
    <#lemma13>
    [ a r:Fact; r:gives {"maplist(var_list,[10,10,10,10,10,10,10,10,10,10],[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]])"}]
  );
  r:rule [ a r:Fact; r:gives {"var_matrix(avar0,avar2)" <= {"repeat(avar0,avar0,avar1)".
    "maplist(var_list,avar1,avar2)"}}].

<#lemma6> a r:Inference;
  r:gives {
    "ad_partition(10,[(2,5)])".
  };
  r:evidence (
    <#lemma14>
    [ a r:Fact; r:gives {"2>1"}]
  );
  r:rule [ a r:Fact; r:gives {"ad_partition(avar0,[(avar1,avar2)|avar3])" <= {"generator([(avar0,1)],[(avar1,avar2)|avar3])".
    "avar1>1"}}].

<#lemma7> a r:Inference;
  r:gives {
    "rep_perm(10,[(2,5)],[2,1,4,3,6,5,8,7,10,9])".
  };
  r:evidence (
    <#lemma15>
    [ a r:Fact; r:gives {"maplist(rotate,[[1,2],[3,4],[5,6],[7,8],[9,10]],[[2,1],[4,3],[6,5],[8,7],[10,9]])"}]
    [ a r:Fact; r:gives {"flatten([[2,1],[4,3],[6,5],[8,7],[10,9]],[2,1,4,3,6,5,8,7,10,9])"}]
  );
  r:rule [ a r:Fact; r:gives {"rep_perm(avar0,avar1,avar4)" <= {"splitter(avar0,avar1,avar2)".
    "maplist(rotate,avar2,avar3)".
    "flatten(avar3,avar4)"}}].

<#lemma8> a r:Inference;
  r:gives {
    "list_permute([2,1,4,3,6,5,8,7,10,9],[[1,1,2,3,4,5,6,7,8,9],[1,1,3,2,5,4,7,6,9,8],[3,2,10,10,11,12,13,14,15,16],[2,3,10,10,12,11,14,13,16,15],[5,4,12,11,17,17,18,19,20,21],[4,5,11,12,17,17,19,18,21,20],[7,6,14,13,19,18,22,22,23,24],[6,7,13,14,18,19,22,22,24,23],[9,8,16,15,21,20,24,23,25,25],[8,9,15,16,20,21,23,24,25,25]],[[1,1,3,2,5,4,7,6,9,8],[1,1,2,3,4,5,6,7,8,9],[2,3,10,10,12,11,14,13,16,15],[3,2,10,10,11,12,13,14,15,16],[4,5,11,12,17,17,19,18,21,20],[5,4,12,11,17,17,18,19,20,21],[6,7,13,14,18,19,22,22,24,23],[7,6,14,13,19,18,22,22,23,24],[8,9,15,16,20,21,23,24,25,25],[9,8,16,15,21,20,24,23,25,25]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"nth1(2,[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19])"}]
    <#lemma16>
  );
  r:rule [ a r:Fact; r:gives {"list_permute([avar0|avar3],avar1,[avar2|avar4])" <= {"nth1(avar0,avar1,avar2)".
    "list_permute(avar3,avar1,avar4)"}}].

<#lemma9> a r:Inference;
  r:gives {
    "transpose([[1,1,3,2,5,4,7,6,9,8],[1,1,2,3,4,5,6,7,8,9],[2,3,10,10,12,11,14,13,16,15],[3,2,10,10,11,12,13,14,15,16],[4,5,11,12,17,17,19,18,21,20],[5,4,12,11,17,17,18,19,20,21],[6,7,13,14,18,19,22,22,24,23],[7,6,14,13,19,18,22,22,23,24],[8,9,15,16,20,21,23,24,25,25],[9,8,16,15,21,20,24,23,25,25]],[[1,1,2,3,4,5,6,7,8,9],[1,1,3,2,5,4,7,6,9,8],[3,2,10,10,11,12,13,14,15,16],[2,3,10,10,12,11,14,13,16,15],[5,4,12,11,17,17,18,19,20,21],[4,5,11,12,17,17,19,18,21,20],[7,6,14,13,19,18,22,22,23,24],[6,7,13,14,18,19,22,22,24,23],[9,8,16,15,21,20,24,23,25,25],[8,9,15,16,20,21,23,24,25,25]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[some0,some0,some2,some1,some4,some3,some6,some5,some8,some7],[some2,some1,some9,some9,some10,some11,some12,some13,some14,some15],[some1,some2,some9,some9,some11,some10,some13,some12,some15,some14],[some4,some3,some11,some10,some16,some16,some17,some18,some19,some20],[some3,some4,some10,some11,some16,some16,some18,some17,some20,some19],[some6,some5,some13,some12,some18,some17,some21,some21,some22,some23],[some5,some6,some12,some13,some17,some18,some21,some21,some23,some22],[some8,some7,some15,some14,some20,some19,some23,some22,some24,some24],[some7,some8,some14,some15,some19,some20,some22,some23,some24,some24]]=[[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[some0,some0,some2,some1,some4,some3,some6,some5,some8,some7],[some2,some1,some9,some9,some10,some11,some12,some13,some14,some15],[some1,some2,some9,some9,some11,some10,some13,some12,some15,some14],[some4,some3,some11,some10,some16,some16,some17,some18,some19,some20],[some3,some4,some10,some11,some16,some16,some18,some17,some20,some19],[some6,some5,some13,some12,some18,some17,some21,some21,some22,some23],[some5,some6,some12,some13,some17,some18,some21,some21,some23,some22],[some8,some7,some15,some14,some20,some19,some23,some22,some24,some24],[some7,some8,some14,some15,some19,some20,some22,some23,some24,some24]]"}]
    [ a r:Fact; r:gives {"length([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],10)"}]
    <#lemma17>
    [ a r:Fact; r:gives {"maplist(col([[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[some0,some0,some2,some1,some4,some3,some6,some5,some8,some7],[some2,some1,some9,some9,some10,some11,some12,some13,some14,some15],[some1,some2,some9,some9,some11,some10,some13,some12,some15,some14],[some4,some3,some11,some10,some16,some16,some17,some18,some19,some20],[some3,some4,some10,some11,some16,some16,some18,some17,some20,some19],[some6,some5,some13,some12,some18,some17,some21,some21,some22,some23],[some5,some6,some12,some13,some17,some18,some21,some21,some23,some22],[some8,some7,some15,some14,some20,some19,some23,some22,some24,some24],[some7,some8,some14,some15,some19,some20,some22,some23,some24,some24]]),[1,2,3,4,5,6,7,8,9,10],[[some0,some0,some2,some1,some4,some3,some6,some5,some8,some7],[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[some1,some2,some9,some9,some11,some10,some13,some12,some15,some14],[some2,some1,some9,some9,some10,some11,some12,some13,some14,some15],[some3,some4,some10,some11,some16,some16,some18,some17,some20,some19],[some4,some3,some11,some10,some16,some16,some17,some18,some19,some20],[some5,some6,some12,some13,some17,some18,some21,some21,some23,some22],[some6,some5,some13,some12,some18,some17,some21,some21,some22,some23],[some7,some8,some14,some15,some19,some20,some22,some23,some24,some24],[some8,some7,some15,some14,some20,some19,some23,some22,some24,some24]])"}]
  );
  r:rule [ a r:Fact; r:gives {{"[avar0|avar1]=avar2".
    "length(avar0,avar3)".
    "from_to(1,avar3,avar4)".
    "maplist(col(avar2),avar4,avar5)"} => "transpose(avar2,avar5)"}].

<#lemma10> a r:Inference;
  r:gives {
    "distinct([[1,1,2,3,4,5,6,7,8,9],[1,1,3,2,5,4,7,6,9,8],[3,2,10,10,11,12,13,14,15,16],[2,3,10,10,12,11,14,13,16,15],[5,4,12,11,17,17,18,19,20,21],[4,5,11,12,17,17,19,18,21,20],[7,6,14,13,19,18,22,22,23,24],[6,7,13,14,18,19,22,22,24,23],[9,8,16,15,21,20,24,23,25,25],[8,9,15,16,20,21,23,24,25,25]])".
  };
  r:evidence (
    <#lemma18>
    <#lemma19>
  );
  r:rule [ a r:Fact; r:gives {"distinct([avar0|avar1])" <= {"notin(avar0,avar1)".
    "distinct(avar1)"}}].

<#lemma11> a r:Inference;
  r:gives {
    "eval_matrix([[1,1,2,3,4,5,6,7,8,9],[1,1,3,2,5,4,7,6,9,8],[3,2,10,10,11,12,13,14,15,16],[2,3,10,10,12,11,14,13,16,15],[5,4,12,11,17,17,18,19,20,21],[4,5,11,12,17,17,19,18,21,20],[7,6,14,13,19,18,22,22,23,24],[6,7,13,14,18,19,22,22,24,23],[9,8,16,15,21,20,24,23,25,25],[8,9,15,16,20,21,23,24,25,25]],[(4,1),(4,2),(4,3),(4,4),(4,5),(4,6),(4,7),(4,8),(4,9),(4,10),(4,11),(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"flatten([[1,1,2,3,4,5,6,7,8,9],[1,1,3,2,5,4,7,6,9,8],[3,2,10,10,11,12,13,14,15,16],[2,3,10,10,12,11,14,13,16,15],[5,4,12,11,17,17,18,19,20,21],[4,5,11,12,17,17,19,18,21,20],[7,6,14,13,19,18,22,22,23,24],[6,7,13,14,18,19,22,22,24,23],[9,8,16,15,21,20,24,23,25,25],[8,9,15,16,20,21,23,24,25,25]],[1,1,2,3,4,5,6,7,8,9,1,1,3,2,5,4,7,6,9,8,3,2,10,10,11,12,13,14,15,16,2,3,10,10,12,11,14,13,16,15,5,4,12,11,17,17,18,19,20,21,4,5,11,12,17,17,19,18,21,20,7,6,14,13,19,18,22,22,23,24,6,7,13,14,18,19,22,22,24,23,9,8,16,15,21,20,24,23,25,25,8,9,15,16,20,21,23,24,25,25])"}]
    [ a r:Fact; r:gives {"setof(some0,member(some0,[1,1,2,3,4,5,6,7,8,9,1,1,3,2,5,4,7,6,9,8,3,2,10,10,11,12,13,14,15,16,2,3,10,10,12,11,14,13,16,15,5,4,12,11,17,17,18,19,20,21,4,5,11,12,17,17,19,18,21,20,7,6,14,13,19,18,22,22,23,24,6,7,13,14,18,19,22,22,24,23,9,8,16,15,21,20,24,23,25,25,8,9,15,16,20,21,23,24,25,25]),[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])"}]
    [ a r:Fact; r:gives {"maplist(count_var([1,1,2,3,4,5,6,7,8,9,1,1,3,2,5,4,7,6,9,8,3,2,10,10,11,12,13,14,15,16,2,3,10,10,12,11,14,13,16,15,5,4,12,11,17,17,18,19,20,21,4,5,11,12,17,17,19,18,21,20,7,6,14,13,19,18,22,22,23,24,6,7,13,14,18,19,22,22,24,23,9,8,16,15,21,20,24,23,25,25,8,9,15,16,20,21,23,24,25,25]),[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4])"}]
    <#lemma20>
    [ a r:Fact; r:gives {"sort([(4,1),(4,2),(4,3),(4,4),(4,5),(4,6),(4,7),(4,8),(4,9),(4,10),(4,11),(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],[(4,1),(4,2),(4,3),(4,4),(4,5),(4,6),(4,7),(4,8),(4,9),(4,10),(4,11),(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)])"}]
    [ a r:Fact; r:gives {"maplist(snd,[(4,1),(4,2),(4,3),(4,4),(4,5),(4,6),(4,7),(4,8),(4,9),(4,10),(4,11),(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])"}]
    [ a r:Fact; r:gives {"length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],25)"}]
    <#lemma21>
  );
  r:rule [ a r:Fact; r:gives {"eval_matrix(avar0,avar6)" <= {"flatten(avar0,avar1)".
    "setof(avar2,member(avar2,avar1),avar3)".
    "maplist(count_var(avar1),avar3,avar4)".
    "zip(avar4,avar3,avar5)".
    "sort(avar5,avar6)".
    "maplist(snd,avar6,avar7)".
    "length(avar7,avar8)".
    "from_to(1,avar8,avar7)"}}].

<#lemma12> a r:Inference;
  r:gives {
    "total([(4,1),(4,2),(4,3),(4,4),(4,5),(4,6),(4,7),(4,8),(4,9),(4,10),(4,11),(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],1300)" .
  };
  r:evidence (
    <#lemma22>
  );
  r:rule [ a r:Fact; r:gives {"total(avar0,avar1)" <= "total(avar0,0,avar1)"}].

<#lemma13> a r:Inference;
  r:gives {
    "repeat(10,10,[10,10,10,10,10,10,10,10,10,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(10 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 9}]
    <#lemma23>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_12 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_12.
    "repeat(avar2,avar0,avar3)"} => {"repeat(avar2,avar1,[avar2|avar3])"}}].

<#lemma14> a r:Inference;
  r:gives {
    "generator([(10,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma24>
    <#lemma25>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma15> a r:Inference;
  r:gives {
    "splitter(10,[(2,5)],[[1,2],[3,4],[5,6],[7,8],[9,10]])".
  };
  r:evidence (
    <#lemma17>
    <#lemma26>
  );
  r:rule [ a r:Fact; r:gives {"splitter(avar0,avar2,avar3)" <= {"from_to(1,avar0,avar1)".
    "splitter(avar1,avar2,[],avar3)"}}].

<#lemma16> a r:Inference;
  r:gives {
    "list_permute([1,4,3,6,5,8,7,10,9],[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"nth1(1,[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9])"}]
    <#lemma27>
  );
  r:rule [ a r:Fact; r:gives {"list_permute([avar0|avar3],avar1,[avar2|avar4])" <= {"nth1(avar0,avar1,avar2)".
    "list_permute(avar3,avar1,avar4)"}}].

<#lemma17> a r:Inference;
  r:gives {
    "from_to(1,10,[1,2,3,4,5,6,7,8,9,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"var([1,2,3,4,5,6,7,8,9,10]);is_list([1,2,3,4,5,6,7,8,9,10])"}]
    [ a r:Fact; r:gives {"integer(1)"}]
    [ a r:Fact; r:gives {"integer(10)"}]
    [ a r:Fact; r:gives {"1=<10"}]
    <#lemma28>
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
  );
  r:rule [ a r:Fact; r:gives {"from_to(avar1,avar2,avar0)" <= {"var(avar0);is_list(avar0)".
    "integer(avar1)".
    "integer(avar2)".
    "avar1=<avar2".
    "from_to_acc(avar1,[avar2],avar0)".
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}}].

<#lemma18> a r:Inference;
  r:gives {
    "notin([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[[some0,some0,some2,some1,some4,some3,some6,some5,some8,some7],[some2,some1,some9,some9,some10,some11,some12,some13,some14,some15],[some1,some2,some9,some9,some11,some10,some13,some12,some15,some14],[some4,some3,some11,some10,some16,some16,some17,some18,some19,some20],[some3,some4,some10,some11,some16,some16,some18,some17,some20,some19],[some6,some5,some13,some12,some18,some17,some21,some21,some22,some23],[some5,some6,some12,some13,some17,some18,some21,some21,some23,some22],[some8,some7,some15,some14,some20,some19,some23,some22,some24,some24],[some7,some8,some14,some15,some19,some20,some22,some23,some24,some24]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8]\==[some0,some0,some2,some1,some4,some3,some6,some5,some8,some7]"}]
    <#lemma29>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma19> a r:Inference;
  r:gives {
    "distinct([[some0,some0,some2,some1,some4,some3,some6,some5,some8,some7],[some2,some1,some9,some9,some10,some11,some12,some13,some14,some15],[some1,some2,some9,some9,some11,some10,some13,some12,some15,some14],[some4,some3,some11,some10,some16,some16,some17,some18,some19,some20],[some3,some4,some10,some11,some16,some16,some18,some17,some20,some19],[some6,some5,some13,some12,some18,some17,some21,some21,some22,some23],[some5,some6,some12,some13,some17,some18,some21,some21,some23,some22],[some8,some7,some15,some14,some20,some19,some23,some22,some24,some24],[some7,some8,some14,some15,some19,some20,some22,some23,some24,some24]])".
  };
  r:evidence (
    <#lemma30>
    <#lemma31>
  );
  r:rule [ a r:Fact; r:gives {"distinct([avar0|avar1])" <= {"notin(avar0,avar1)".
    "distinct(avar1)"}}].

<#lemma20> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],[(4,1),(4,2),(4,3),(4,4),(4,5),(4,6),(4,7),(4,8),(4,9),(4,10),(4,11),(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)])".
  };
  r:evidence (
    <#lemma32>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma21> a r:Inference;
  r:gives {
    "from_to(1,25,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"var([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]);is_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])"}]
    [ a r:Fact; r:gives {"integer(1)"}]
    [ a r:Fact; r:gives {"integer(25)"}]
    [ a r:Fact; r:gives {"1=<25"}]
    <#lemma33>
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
  );
  r:rule [ a r:Fact; r:gives {"from_to(avar1,avar2,avar0)" <= {"var(avar0);is_list(avar0)".
    "integer(avar1)".
    "integer(avar2)".
    "avar1=<avar2".
    "from_to_acc(avar1,[avar2],avar0)".
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}}].

<#lemma22> a r:Inference;
  r:gives {
    "total([(4,1),(4,2),(4,3),(4,4),(4,5),(4,6),(4,7),(4,8),(4,9),(4,10),(4,11),(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],0,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(0 {"4*1"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 4}]
    <#lemma34>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_21 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_21.
    "total(avar4,avar0,avar5)"}}].

<#lemma23> a r:Inference;
  r:gives {
    "repeat(10,9,[10,10,10,10,10,10,10,10,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(9 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 8}]
    <#lemma35>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_22 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_22.
    "repeat(avar2,avar0,avar3)"} => {"repeat(avar2,avar1,[avar2|avar3])"}}].

<#lemma24> a r:Inference;
  r:gives {
    "next_partition([(10,1)],[(1,1),(9,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"10>2"}]
    [ a r:Fact; r:gives {(10 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 9}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(avar0,1)|avar2],[(1,1),(avar1,1)|avar2])" <= {"avar0>2" .
    (_:x_0_23 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_1_23}}].

<#lemma25> a r:Inference;
  r:gives {
    "generator([(1,1),(9,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma36>
    <#lemma37>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma26> a r:Inference;
  r:gives {
    "splitter([1,2,3,4,5,6,7,8,9,10],[(2,5)],[],[[1,2],[3,4],[5,6],[7,8],[9,10]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"5>0"}]
    [ a r:Fact; r:gives {"append([1,2],[3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10])"}]
    [ a r:Fact; r:gives {"length([1,2],2)"}]
    [ a r:Fact; r:gives {(5 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 4}]
    <#lemma38>
  );
  r:rule [ a r:Fact; r:gives {{"avar0>0" .
    "append(avar1,avar2,avar3)".
    "length(avar1,avar4)".
    (_:x_0_25 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_5_25.
    "splitter(avar2,[(avar4,avar5)|avar6],[avar1|avar7],avar8)"} => "splitter(avar3,[(avar4,avar0)|avar6],avar7,avar8)"}].

<#lemma27> a r:Inference;
  r:gives {
    "list_permute([4,3,6,5,8,7,10,9],[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"nth1(4,[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39])"}]
    <#lemma39>
  );
  r:rule [ a r:Fact; r:gives {"list_permute([avar0|avar3],avar1,[avar2|avar4])" <= {"nth1(avar0,avar1,avar2)".
    "list_permute(avar3,avar1,avar4)"}}].

<#lemma28> a r:Inference;
  r:gives {
    "from_to_acc(1,[10],[1,2,3,4,5,6,7,8,9,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(10 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 9}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma40>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_27 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_27.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma29> a r:Inference;
  r:gives {
    "notin([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[[some2,some1,some9,some9,some10,some11,some12,some13,some14,some15],[some1,some2,some9,some9,some11,some10,some13,some12,some15,some14],[some4,some3,some11,some10,some16,some16,some17,some18,some19,some20],[some3,some4,some10,some11,some16,some16,some18,some17,some20,some19],[some6,some5,some13,some12,some18,some17,some21,some21,some22,some23],[some5,some6,some12,some13,some17,some18,some21,some21,some23,some22],[some8,some7,some15,some14,some20,some19,some23,some22,some24,some24],[some7,some8,some14,some15,some19,some20,some22,some23,some24,some24]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8]\==[some2,some1,some9,some9,some10,some11,some12,some13,some14,some15]"}]
    <#lemma41>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma30> a r:Inference;
  r:gives {
    "notin([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[[some1,some2,some9,some9,some10,some11,some12,some13,some14,some15],[some2,some1,some9,some9,some11,some10,some13,some12,some15,some14],[some3,some4,some11,some10,some16,some16,some17,some18,some19,some20],[some4,some3,some10,some11,some16,some16,some18,some17,some20,some19],[some5,some6,some13,some12,some18,some17,some21,some21,some22,some23],[some6,some5,some12,some13,some17,some18,some21,some21,some23,some22],[some7,some8,some15,some14,some20,some19,some23,some22,some24,some24],[some8,some7,some14,some15,some19,some20,some22,some23,some24,some24]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8]\==[some1,some2,some9,some9,some10,some11,some12,some13,some14,some15]"}]
    <#lemma42>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma31> a r:Inference;
  r:gives {
    "distinct([[some1,some2,some9,some9,some10,some11,some12,some13,some14,some15],[some2,some1,some9,some9,some11,some10,some13,some12,some15,some14],[some3,some4,some11,some10,some16,some16,some17,some18,some19,some20],[some4,some3,some10,some11,some16,some16,some18,some17,some20,some19],[some5,some6,some13,some12,some18,some17,some21,some21,some22,some23],[some6,some5,some12,some13,some17,some18,some21,some21,some23,some22],[some7,some8,some15,some14,some20,some19,some23,some22,some24,some24],[some8,some7,some14,some15,some19,some20,some22,some23,some24,some24]])".
  };
  r:evidence (
    <#lemma43>
    <#lemma44>
  );
  r:rule [ a r:Fact; r:gives {"distinct([avar0|avar1])" <= {"notin(avar0,avar1)".
    "distinct(avar1)"}}].

<#lemma32> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9,some10,some11,some12,some13,some14,some15,some16,some17,some18,some19,some20,some21,some22,some23],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5),(4,some6),(4,some7),(4,some8),(4,some9),(4,some10),(4,some11),(4,some12),(4,some13),(4,some14),(4,some15),(4,some16),(4,some17),(4,some18),(4,some19),(4,some20),(4,some21),(4,some22),(4,some23)])".
  };
  r:evidence (
    <#lemma45>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma33> a r:Inference;
  r:gives {
    "from_to_acc(1,[25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(25 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 24}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma46>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_32 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_32.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma34> a r:Inference;
  r:gives {
    "total([(4,2),(4,3),(4,4),(4,5),(4,6),(4,7),(4,8),(4,9),(4,10),(4,11),(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],4,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(4 {"4*2"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 12}]
    <#lemma47>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_33 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_33.
    "total(avar4,avar0,avar5)"}}].

<#lemma35> a r:Inference;
  r:gives {
    "repeat(10,8,[10,10,10,10,10,10,10,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(8 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 7}]
    <#lemma48>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_34 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_34.
    "repeat(avar2,avar0,avar3)"} => {"repeat(avar2,avar1,[avar2|avar3])"}}].

<#lemma36> a r:Inference;
  r:gives {
    "next_partition([(1,1),(9,1)],[(2,1),(8,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"9>2"}]
    [ a r:Fact; r:gives {(9 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 8}]
    [ a r:Fact; r:gives {({"1+9"} 8) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> 2}]
    [ a r:Fact; r:gives {"2>0"}]
    [ a r:Fact; r:gives {({"1+9"} 8) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> 1}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar3),(avar0,1)|avar5],[(avar2,1),(avar1,avar4)|avar5])" <= {"avar0>2" .
    (_:x_0_35 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_1_35.
    ({"avar3+avar0"} _:x_1_35) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> _:x_2_35.
    "avar2>0" .
    ({"avar3+avar0"} _:x_1_35) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> _:x_4_35}}].

<#lemma37> a r:Inference;
  r:gives {
    "generator([(2,1),(8,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma49>
    <#lemma50>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma38> a r:Inference;
  r:gives {
    "splitter([3,4,5,6,7,8,9,10],[(2,4)],[[1,2]],[[1,2],[3,4],[5,6],[7,8],[9,10]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"4>0"}]
    [ a r:Fact; r:gives {"append([3,4],[5,6,7,8,9,10],[3,4,5,6,7,8,9,10])"}]
    [ a r:Fact; r:gives {"length([3,4],2)"}]
    [ a r:Fact; r:gives {(4 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 3}]
    <#lemma51>
  );
  r:rule [ a r:Fact; r:gives {{"avar0>0" .
    "append(avar1,avar2,avar3)".
    "length(avar1,avar4)".
    (_:x_0_37 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_5_37.
    "splitter(avar2,[(avar4,avar5)|avar6],[avar1|avar7],avar8)"} => "splitter(avar3,[(avar4,avar0)|avar6],avar7,avar8)"}].

<#lemma39> a r:Inference;
  r:gives {
    "list_permute([3,6,5,8,7,10,9],[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"nth1(3,[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29])"}]
    <#lemma52>
  );
  r:rule [ a r:Fact; r:gives {"list_permute([avar0|avar3],avar1,[avar2|avar4])" <= {"nth1(avar0,avar1,avar2)".
    "list_permute(avar3,avar1,avar4)"}}].

<#lemma40> a r:Inference;
  r:gives {
    "from_to_acc(1,[9,10],[1,2,3,4,5,6,7,8,9,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(9 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 8}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma53>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_39 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_39.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma41> a r:Inference;
  r:gives {
    "notin([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[[some1,some2,some9,some9,some11,some10,some13,some12,some15,some14],[some4,some3,some11,some10,some16,some16,some17,some18,some19,some20],[some3,some4,some10,some11,some16,some16,some18,some17,some20,some19],[some6,some5,some13,some12,some18,some17,some21,some21,some22,some23],[some5,some6,some12,some13,some17,some18,some21,some21,some23,some22],[some8,some7,some15,some14,some20,some19,some23,some22,some24,some24],[some7,some8,some14,some15,some19,some20,some22,some23,some24,some24]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8]\==[some1,some2,some9,some9,some10,some11,some12,some13,some14,some15]"}]
    <#lemma54>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma42> a r:Inference;
  r:gives {
    "notin([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[[some2,some1,some9,some9,some11,some10,some13,some12,some15,some14],[some3,some4,some11,some10,some16,some16,some17,some18,some19,some20],[some4,some3,some10,some11,some16,some16,some18,some17,some20,some19],[some5,some6,some13,some12,some18,some17,some21,some21,some22,some23],[some6,some5,some12,some13,some17,some18,some21,some21,some23,some22],[some7,some8,some15,some14,some20,some19,some23,some22,some24,some24],[some8,some7,some14,some15,some19,some20,some22,some23,some24,some24]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8]\==[some2,some1,some9,some9,some10,some11,some12,some13,some14,some15]"}]
    <#lemma55>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma43> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some2,some3,some4,some5,some6,some7,some8],[[some1,some0,some2,some2,some4,some3,some6,some5,some8,some7],[some9,some10,some4,some3,some11,some11,some12,some13,some14,some15],[some10,some9,some3,some4,some11,some11,some13,some12,some15,some14],[some16,some17,some6,some5,some13,some12,some18,some18,some19,some20],[some17,some16,some5,some6,some12,some13,some18,some18,some20,some19],[some21,some22,some8,some7,some15,some14,some20,some19,some23,some23],[some22,some21,some7,some8,some14,some15,some19,some20,some23,some23]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some2,some3,some4,some5,some6,some7,some8]\==[some1,some0,some2,some2,some4,some3,some6,some5,some8,some7]"}]
    <#lemma56>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma44> a r:Inference;
  r:gives {
    "distinct([[some1,some0,some2,some2,some4,some3,some6,some5,some8,some7],[some9,some10,some4,some3,some11,some11,some12,some13,some14,some15],[some10,some9,some3,some4,some11,some11,some13,some12,some15,some14],[some16,some17,some6,some5,some13,some12,some18,some18,some19,some20],[some17,some16,some5,some6,some12,some13,some18,some18,some20,some19],[some21,some22,some8,some7,some15,some14,some20,some19,some23,some23],[some22,some21,some7,some8,some14,some15,some19,some20,some23,some23]])".
  };
  r:evidence (
    <#lemma57>
    <#lemma58>
  );
  r:rule [ a r:Fact; r:gives {"distinct([avar0|avar1])" <= {"notin(avar0,avar1)".
    "distinct(avar1)"}}].

<#lemma45> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9,some10,some11,some12,some13,some14,some15,some16,some17,some18,some19,some20,some21,some22],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5),(4,some6),(4,some7),(4,some8),(4,some9),(4,some10),(4,some11),(4,some12),(4,some13),(4,some14),(4,some15),(4,some16),(4,some17),(4,some18),(4,some19),(4,some20),(4,some21),(4,some22)])".
  };
  r:evidence (
    <#lemma59>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma46> a r:Inference;
  r:gives {
    "from_to_acc(1,[24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(24 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 23}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma60>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_45 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_45.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma47> a r:Inference;
  r:gives {
    "total([(4,3),(4,4),(4,5),(4,6),(4,7),(4,8),(4,9),(4,10),(4,11),(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],12,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(12 {"4*3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 24}]
    <#lemma61>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_46 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_46.
    "total(avar4,avar0,avar5)"}}].

<#lemma48> a r:Inference;
  r:gives {
    "repeat(10,7,[10,10,10,10,10,10,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(7 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 6}]
    <#lemma62>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_47 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_47.
    "repeat(avar2,avar0,avar3)"} => {"repeat(avar2,avar1,[avar2|avar3])"}}].

<#lemma49> a r:Extraction;
  r:gives {
    "next_partition([(2,1),(8,1)],[(1,2),(8,1)])".
  };
  r:because [ a r:Parsing; r:source <>].

<#lemma50> a r:Inference;
  r:gives {
    "generator([(1,2),(8,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma63>
    <#lemma64>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma51> a r:Inference;
  r:gives {
    "splitter([5,6,7,8,9,10],[(2,3)],[[3,4],[1,2]],[[1,2],[3,4],[5,6],[7,8],[9,10]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"3>0"}]
    [ a r:Fact; r:gives {"append([5,6],[7,8,9,10],[5,6,7,8,9,10])"}]
    [ a r:Fact; r:gives {"length([5,6],2)"}]
    [ a r:Fact; r:gives {(3 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 2}]
    <#lemma65>
  );
  r:rule [ a r:Fact; r:gives {{"avar0>0" .
    "append(avar1,avar2,avar3)".
    "length(avar1,avar4)".
    (_:x_0_49 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_5_49.
    "splitter(avar2,[(avar4,avar5)|avar6],[avar1|avar7],avar8)"} => "splitter(avar3,[(avar4,avar0)|avar6],avar7,avar8)"}].

<#lemma52> a r:Inference;
  r:gives {
    "list_permute([6,5,8,7,10,9],[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"nth1(6,[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59])"}]
    <#lemma66>
  );
  r:rule [ a r:Fact; r:gives {"list_permute([avar0|avar3],avar1,[avar2|avar4])" <= {"nth1(avar0,avar1,avar2)".
    "list_permute(avar3,avar1,avar4)"}}].

<#lemma53> a r:Inference;
  r:gives {
    "from_to_acc(1,[8,9,10],[1,2,3,4,5,6,7,8,9,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(8 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 7}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma67>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_51 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_51.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma54> a r:Inference;
  r:gives {
    "notin([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[[some4,some3,some10,some11,some16,some16,some17,some18,some19,some20],[some3,some4,some11,some10,some16,some16,some18,some17,some20,some19],[some6,some5,some12,some13,some18,some17,some21,some21,some22,some23],[some5,some6,some13,some12,some17,some18,some21,some21,some23,some22],[some8,some7,some14,some15,some20,some19,some23,some22,some24,some24],[some7,some8,some15,some14,some19,some20,some22,some23,some24,some24]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8]\==[some4,some3,some9,some10,some11,some11,some12,some13,some14,some15]"}]
    <#lemma68>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma55> a r:Inference;
  r:gives {
    "notin([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[[some3,some4,some10,some11,some16,some16,some17,some18,some19,some20],[some4,some3,some11,some10,some16,some16,some18,some17,some20,some19],[some5,some6,some12,some13,some18,some17,some21,some21,some22,some23],[some6,some5,some13,some12,some17,some18,some21,some21,some23,some22],[some7,some8,some14,some15,some20,some19,some23,some22,some24,some24],[some8,some7,some15,some14,some19,some20,some22,some23,some24,some24]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8]\==[some3,some4,some9,some10,some11,some11,some12,some13,some14,some15]"}]
    <#lemma69>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma56> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some2,some3,some4,some5,some6,some7,some8],[[some9,some10,some4,some3,some11,some11,some12,some13,some14,some15],[some10,some9,some3,some4,some11,some11,some13,some12,some15,some14],[some16,some17,some6,some5,some13,some12,some18,some18,some19,some20],[some17,some16,some5,some6,some12,some13,some18,some18,some20,some19],[some21,some22,some8,some7,some15,some14,some20,some19,some23,some23],[some22,some21,some7,some8,some14,some15,some19,some20,some23,some23]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some2,some3,some4,some5,some6,some7,some8]\==[some9,some10,some4,some3,some11,some11,some12,some13,some14,some15]"}]
    <#lemma70>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma57> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some2,some3,some4,some5,some6,some7,some8],[[some9,some10,some3,some4,some11,some11,some12,some13,some14,some15],[some10,some9,some4,some3,some11,some11,some13,some12,some15,some14],[some16,some17,some5,some6,some13,some12,some18,some18,some19,some20],[some17,some16,some6,some5,some12,some13,some18,some18,some20,some19],[some21,some22,some7,some8,some15,some14,some20,some19,some23,some23],[some22,some21,some8,some7,some14,some15,some19,some20,some23,some23]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some2,some3,some4,some5,some6,some7,some8]\==[some9,some10,some3,some4,some11,some11,some12,some13,some14,some15]"}]
    <#lemma71>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma58> a r:Inference;
  r:gives {
    "distinct([[some9,some10,some3,some4,some11,some11,some12,some13,some14,some15],[some10,some9,some4,some3,some11,some11,some13,some12,some15,some14],[some16,some17,some5,some6,some13,some12,some18,some18,some19,some20],[some17,some16,some6,some5,some12,some13,some18,some18,some20,some19],[some21,some22,some7,some8,some15,some14,some20,some19,some23,some23],[some22,some21,some8,some7,some14,some15,some19,some20,some23,some23]])".
  };
  r:evidence (
    <#lemma72>
    <#lemma73>
  );
  r:rule [ a r:Fact; r:gives {"distinct([avar0|avar1])" <= {"notin(avar0,avar1)".
    "distinct(avar1)"}}].

<#lemma59> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9,some10,some11,some12,some13,some14,some15,some16,some17,some18,some19,some20,some21],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5),(4,some6),(4,some7),(4,some8),(4,some9),(4,some10),(4,some11),(4,some12),(4,some13),(4,some14),(4,some15),(4,some16),(4,some17),(4,some18),(4,some19),(4,some20),(4,some21)])".
  };
  r:evidence (
    <#lemma74>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma60> a r:Inference;
  r:gives {
    "from_to_acc(1,[23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(23 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 22}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma75>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_58 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_58.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma61> a r:Inference;
  r:gives {
    "total([(4,4),(4,5),(4,6),(4,7),(4,8),(4,9),(4,10),(4,11),(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],24,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(24 {"4*4"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 40}]
    <#lemma76>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_59 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_59.
    "total(avar4,avar0,avar5)"}}].

<#lemma62> a r:Inference;
  r:gives {
    "repeat(10,6,[10,10,10,10,10,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(6 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 5}]
    <#lemma77>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_60 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_60.
    "repeat(avar2,avar0,avar3)"} => {"repeat(avar2,avar1,[avar2|avar3])"}}].

<#lemma63> a r:Inference;
  r:gives {
    "next_partition([(1,2),(8,1)],[(3,1),(7,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"8>2"}]
    [ a r:Fact; r:gives {(8 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 7}]
    [ a r:Fact; r:gives {({"2+8"} 7) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> 3}]
    [ a r:Fact; r:gives {"3>0"}]
    [ a r:Fact; r:gives {({"2+8"} 7) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> 1}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar3),(avar0,1)|avar5],[(avar2,1),(avar1,avar4)|avar5])" <= {"avar0>2" .
    (_:x_0_61 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_1_61.
    ({"avar3+avar0"} _:x_1_61) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> _:x_2_61.
    "avar2>0" .
    ({"avar3+avar0"} _:x_1_61) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> _:x_4_61}}].

<#lemma64> a r:Inference;
  r:gives {
    "generator([(3,1),(7,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma78>
    <#lemma79>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma65> a r:Inference;
  r:gives {
    "splitter([7,8,9,10],[(2,2)],[[5,6],[3,4],[1,2]],[[1,2],[3,4],[5,6],[7,8],[9,10]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"2>0"}]
    [ a r:Fact; r:gives {"append([7,8],[9,10],[7,8,9,10])"}]
    [ a r:Fact; r:gives {"length([7,8],2)"}]
    [ a r:Fact; r:gives {(2 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 1}]
    <#lemma80>
  );
  r:rule [ a r:Fact; r:gives {{"avar0>0" .
    "append(avar1,avar2,avar3)".
    "length(avar1,avar4)".
    (_:x_0_63 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_5_63.
    "splitter(avar2,[(avar4,avar5)|avar6],[avar1|avar7],avar8)"} => "splitter(avar3,[(avar4,avar0)|avar6],avar7,avar8)"}].

<#lemma66> a r:Inference;
  r:gives {
    "list_permute([5,8,7,10,9],[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"nth1(5,[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49])"}]
    <#lemma81>
  );
  r:rule [ a r:Fact; r:gives {"list_permute([avar0|avar3],avar1,[avar2|avar4])" <= {"nth1(avar0,avar1,avar2)".
    "list_permute(avar3,avar1,avar4)"}}].

<#lemma67> a r:Inference;
  r:gives {
    "from_to_acc(1,[7,8,9,10],[1,2,3,4,5,6,7,8,9,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(7 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 6}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma82>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_65 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_65.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma68> a r:Inference;
  r:gives {
    "notin([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[[some3,some4,some10,some9,some11,some11,some13,some12,some15,some14],[some6,some5,some16,some17,some13,some12,some18,some18,some19,some20],[some5,some6,some17,some16,some12,some13,some18,some18,some20,some19],[some8,some7,some21,some22,some15,some14,some20,some19,some23,some23],[some7,some8,some22,some21,some14,some15,some19,some20,some23,some23]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8]\==[some3,some4,some9,some10,some11,some11,some12,some13,some14,some15]"}]
    <#lemma83>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma69> a r:Inference;
  r:gives {
    "notin([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[[some4,some3,some10,some9,some11,some11,some13,some12,some15,some14],[some5,some6,some16,some17,some13,some12,some18,some18,some19,some20],[some6,some5,some17,some16,some12,some13,some18,some18,some20,some19],[some7,some8,some21,some22,some15,some14,some20,some19,some23,some23],[some8,some7,some22,some21,some14,some15,some19,some20,some23,some23]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8]\==[some4,some3,some9,some10,some11,some11,some12,some13,some14,some15]"}]
    <#lemma84>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma70> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some2,some3,some4,some5,some6,some7,some8],[[some10,some9,some3,some4,some11,some11,some13,some12,some15,some14],[some16,some17,some6,some5,some13,some12,some18,some18,some19,some20],[some17,some16,some5,some6,some12,some13,some18,some18,some20,some19],[some21,some22,some8,some7,some15,some14,some20,some19,some23,some23],[some22,some21,some7,some8,some14,some15,some19,some20,some23,some23]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some2,some3,some4,some5,some6,some7,some8]\==[some9,some10,some3,some4,some11,some11,some12,some13,some14,some15]"}]
    <#lemma85>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma71> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some2,some3,some4,some5,some6,some7,some8],[[some10,some9,some4,some3,some11,some11,some13,some12,some15,some14],[some16,some17,some5,some6,some13,some12,some18,some18,some19,some20],[some17,some16,some6,some5,some12,some13,some18,some18,some20,some19],[some21,some22,some7,some8,some15,some14,some20,some19,some23,some23],[some22,some21,some8,some7,some14,some15,some19,some20,some23,some23]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some2,some3,some4,some5,some6,some7,some8]\==[some9,some10,some4,some3,some11,some11,some12,some13,some14,some15]"}]
    <#lemma86>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma72> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some3,some4,some4,some5,some6,some7,some8],[[some1,some0,some3,some2,some4,some4,some6,some5,some8,some7],[some9,some10,some11,some12,some6,some5,some13,some13,some14,some15],[some10,some9,some12,some11,some5,some6,some13,some13,some15,some14],[some16,some17,some18,some19,some8,some7,some15,some14,some20,some20],[some17,some16,some19,some18,some7,some8,some14,some15,some20,some20]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some3,some4,some4,some5,some6,some7,some8]\==[some1,some0,some3,some2,some4,some4,some6,some5,some8,some7]"}]
    <#lemma87>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma73> a r:Inference;
  r:gives {
    "distinct([[some1,some0,some3,some2,some4,some4,some6,some5,some8,some7],[some9,some10,some11,some12,some6,some5,some13,some13,some14,some15],[some10,some9,some12,some11,some5,some6,some13,some13,some15,some14],[some16,some17,some18,some19,some8,some7,some15,some14,some20,some20],[some17,some16,some19,some18,some7,some8,some14,some15,some20,some20]])".
  };
  r:evidence (
    <#lemma88>
    <#lemma89>
  );
  r:rule [ a r:Fact; r:gives {"distinct([avar0|avar1])" <= {"notin(avar0,avar1)".
    "distinct(avar1)"}}].

<#lemma74> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9,some10,some11,some12,some13,some14,some15,some16,some17,some18,some19,some20],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5),(4,some6),(4,some7),(4,some8),(4,some9),(4,some10),(4,some11),(4,some12),(4,some13),(4,some14),(4,some15),(4,some16),(4,some17),(4,some18),(4,some19),(4,some20)])".
  };
  r:evidence (
    <#lemma90>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma75> a r:Inference;
  r:gives {
    "from_to_acc(1,[22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(22 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 21}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma91>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_73 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_73.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma76> a r:Inference;
  r:gives {
    "total([(4,5),(4,6),(4,7),(4,8),(4,9),(4,10),(4,11),(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],40,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(40 {"4*5"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 60}]
    <#lemma92>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_74 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_74.
    "total(avar4,avar0,avar5)"}}].

<#lemma77> a r:Inference;
  r:gives {
    "repeat(10,5,[10,10,10,10,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(5 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 4}]
    <#lemma93>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_75 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_75.
    "repeat(avar2,avar0,avar3)"} => {"repeat(avar2,avar1,[avar2|avar3])"}}].

<#lemma78> a r:Inference;
  r:gives {
    "next_partition([(3,1),(7,1)],[(1,1),(2,1),(7,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"3>2"}]
    [ a r:Fact; r:gives {(3 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 2}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(avar0,1)|avar2],[(1,1),(avar1,1)|avar2])" <= {"avar0>2" .
    (_:x_0_76 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_1_76}}].

<#lemma79> a r:Inference;
  r:gives {
    "generator([(1,1),(2,1),(7,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma94>
    <#lemma95>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma80> a r:Inference;
  r:gives {
    "splitter([9,10],[(2,1)],[[7,8],[5,6],[3,4],[1,2]],[[1,2],[3,4],[5,6],[7,8],[9,10]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"1>0"}]
    [ a r:Fact; r:gives {"append([9,10],[],[9,10])"}]
    [ a r:Fact; r:gives {"length([9,10],2)"}]
    [ a r:Fact; r:gives {(1 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 0}]
    <#lemma96>
  );
  r:rule [ a r:Fact; r:gives {{"avar0>0" .
    "append(avar1,avar2,avar3)".
    "length(avar1,avar4)".
    (_:x_0_78 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_5_78.
    "splitter(avar2,[(avar4,avar5)|avar6],[avar1|avar7],avar8)"} => "splitter(avar3,[(avar4,avar0)|avar6],avar7,avar8)"}].

<#lemma81> a r:Inference;
  r:gives {
    "list_permute([8,7,10,9],[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"nth1(8,[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79])"}]
    <#lemma97>
  );
  r:rule [ a r:Fact; r:gives {"list_permute([avar0|avar3],avar1,[avar2|avar4])" <= {"nth1(avar0,avar1,avar2)".
    "list_permute(avar3,avar1,avar4)"}}].

<#lemma82> a r:Inference;
  r:gives {
    "from_to_acc(1,[6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(6 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 5}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma98>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_80 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_80.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma83> a r:Inference;
  r:gives {
    "notin([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[[some6,some5,some16,some17,some12,some13,some18,some18,some19,some20],[some5,some6,some17,some16,some13,some12,some18,some18,some20,some19],[some8,some7,some21,some22,some14,some15,some20,some19,some23,some23],[some7,some8,some22,some21,some15,some14,some19,some20,some23,some23]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8]\==[some6,some5,some9,some10,some11,some12,some13,some13,some14,some15]"}]
    <#lemma99>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma84> a r:Inference;
  r:gives {
    "notin([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[[some5,some6,some16,some17,some12,some13,some18,some18,some19,some20],[some6,some5,some17,some16,some13,some12,some18,some18,some20,some19],[some7,some8,some21,some22,some14,some15,some20,some19,some23,some23],[some8,some7,some22,some21,some15,some14,some19,some20,some23,some23]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8]\==[some5,some6,some9,some10,some11,some12,some13,some13,some14,some15]"}]
    <#lemma100>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma85> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some2,some3,some4,some5,some6,some7,some8],[[some16,some17,some6,some5,some12,some13,some18,some18,some19,some20],[some17,some16,some5,some6,some13,some12,some18,some18,some20,some19],[some21,some22,some8,some7,some14,some15,some20,some19,some23,some23],[some22,some21,some7,some8,some15,some14,some19,some20,some23,some23]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some2,some3,some4,some5,some6,some7,some8]\==[some9,some10,some6,some5,some11,some12,some13,some13,some14,some15]"}]
    <#lemma101>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma86> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some2,some3,some4,some5,some6,some7,some8],[[some16,some17,some5,some6,some12,some13,some18,some18,some19,some20],[some17,some16,some6,some5,some13,some12,some18,some18,some20,some19],[some21,some22,some7,some8,some14,some15,some20,some19,some23,some23],[some22,some21,some8,some7,some15,some14,some19,some20,some23,some23]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some2,some3,some4,some5,some6,some7,some8]\==[some9,some10,some5,some6,some11,some12,some13,some13,some14,some15]"}]
    <#lemma102>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma87> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some3,some4,some4,some5,some6,some7,some8],[[some9,some10,some11,some12,some6,some5,some13,some13,some14,some15],[some10,some9,some12,some11,some5,some6,some13,some13,some15,some14],[some16,some17,some18,some19,some8,some7,some15,some14,some20,some20],[some17,some16,some19,some18,some7,some8,some14,some15,some20,some20]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some3,some4,some4,some5,some6,some7,some8]\==[some9,some10,some11,some12,some6,some5,some13,some13,some14,some15]"}]
    <#lemma103>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma88> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some3,some4,some4,some5,some6,some7,some8],[[some9,some10,some11,some12,some5,some6,some13,some13,some14,some15],[some10,some9,some12,some11,some6,some5,some13,some13,some15,some14],[some16,some17,some18,some19,some7,some8,some15,some14,some20,some20],[some17,some16,some19,some18,some8,some7,some14,some15,some20,some20]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some3,some4,some4,some5,some6,some7,some8]\==[some9,some10,some11,some12,some5,some6,some13,some13,some14,some15]"}]
    <#lemma104>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma89> a r:Inference;
  r:gives {
    "distinct([[some9,some10,some11,some12,some5,some6,some13,some13,some14,some15],[some10,some9,some12,some11,some6,some5,some13,some13,some15,some14],[some16,some17,some18,some19,some7,some8,some15,some14,some20,some20],[some17,some16,some19,some18,some8,some7,some14,some15,some20,some20]])".
  };
  r:evidence (
    <#lemma105>
    <#lemma106>
  );
  r:rule [ a r:Fact; r:gives {"distinct([avar0|avar1])" <= {"notin(avar0,avar1)".
    "distinct(avar1)"}}].

<#lemma90> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9,some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5),(4,some6),(4,some7),(4,some8),(4,some9),(4,some10),(4,some11),(4,some12),(4,some13),(4,some14),(4,some15),(4,some16),(4,some17),(4,some18),(4,some19)])".
  };
  r:evidence (
    <#lemma107>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma91> a r:Inference;
  r:gives {
    "from_to_acc(1,[21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(21 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 20}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma108>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_89 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_89.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma92> a r:Inference;
  r:gives {
    "total([(4,6),(4,7),(4,8),(4,9),(4,10),(4,11),(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],60,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(60 {"4*6"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 84}]
    <#lemma109>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_90 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_90.
    "total(avar4,avar0,avar5)"}}].

<#lemma93> a r:Inference;
  r:gives {
    "repeat(10,4,[10,10,10,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(4 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 3}]
    <#lemma110>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_91 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_91.
    "repeat(avar2,avar0,avar3)"} => {"repeat(avar2,avar1,[avar2|avar3])"}}].

<#lemma94> a r:Inference;
  r:gives {
    "next_partition([(1,1),(2,1),(7,1)],[(1,3),(7,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(1 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 3}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar1),(2,1)|avar2],[(1,avar0)|avar2])" <= {(_:x_1_92 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_92}}].

<#lemma95> a r:Inference;
  r:gives {
    "generator([(1,3),(7,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma111>
    <#lemma112>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma96> a r:Inference;
  r:gives {
    "splitter([],[(2,0)],[[9,10],[7,8],[5,6],[3,4],[1,2]],[[1,2],[3,4],[5,6],[7,8],[9,10]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"reverse([[9,10],[7,8],[5,6],[3,4],[1,2]],[[1,2],[3,4],[5,6],[7,8],[9,10]])"}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
  );
  r:rule [ a r:Fact; r:gives {"splitter([],[(avar2,0)],avar0,avar1)" <= {"reverse(avar0,avar1)".
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}}].

<#lemma97> a r:Inference;
  r:gives {
    "list_permute([7,10,9],[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"nth1(7,[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69])"}]
    <#lemma113>
  );
  r:rule [ a r:Fact; r:gives {"list_permute([avar0|avar3],avar1,[avar2|avar4])" <= {"nth1(avar0,avar1,avar2)".
    "list_permute(avar3,avar1,avar4)"}}].

<#lemma98> a r:Inference;
  r:gives {
    "from_to_acc(1,[5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(5 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 4}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma114>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_96 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_96.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma99> a r:Inference;
  r:gives {
    "notin([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[[some5,some6,some10,some9,some12,some11,some13,some13,some15,some14],[some8,some7,some16,some17,some18,some19,some15,some14,some20,some20],[some7,some8,some17,some16,some19,some18,some14,some15,some20,some20]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8]\==[some5,some6,some9,some10,some11,some12,some13,some13,some14,some15]"}]
    <#lemma115>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma100> a r:Inference;
  r:gives {
    "notin([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[[some6,some5,some10,some9,some12,some11,some13,some13,some15,some14],[some7,some8,some16,some17,some18,some19,some15,some14,some20,some20],[some8,some7,some17,some16,some19,some18,some14,some15,some20,some20]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8]\==[some6,some5,some9,some10,some11,some12,some13,some13,some14,some15]"}]
    <#lemma116>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma101> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some2,some3,some4,some5,some6,some7,some8],[[some10,some9,some5,some6,some12,some11,some13,some13,some15,some14],[some16,some17,some8,some7,some18,some19,some15,some14,some20,some20],[some17,some16,some7,some8,some19,some18,some14,some15,some20,some20]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some2,some3,some4,some5,some6,some7,some8]\==[some9,some10,some5,some6,some11,some12,some13,some13,some14,some15]"}]
    <#lemma117>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma102> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some2,some3,some4,some5,some6,some7,some8],[[some10,some9,some6,some5,some12,some11,some13,some13,some15,some14],[some16,some17,some7,some8,some18,some19,some15,some14,some20,some20],[some17,some16,some8,some7,some19,some18,some14,some15,some20,some20]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some2,some3,some4,some5,some6,some7,some8]\==[some9,some10,some6,some5,some11,some12,some13,some13,some14,some15]"}]
    <#lemma118>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma103> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some3,some4,some4,some5,some6,some7,some8],[[some10,some9,some12,some11,some5,some6,some13,some13,some15,some14],[some16,some17,some18,some19,some8,some7,some15,some14,some20,some20],[some17,some16,some19,some18,some7,some8,some14,some15,some20,some20]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some3,some4,some4,some5,some6,some7,some8]\==[some9,some10,some11,some12,some5,some6,some13,some13,some14,some15]"}]
    <#lemma119>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma104> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some3,some4,some4,some5,some6,some7,some8],[[some10,some9,some12,some11,some6,some5,some13,some13,some15,some14],[some16,some17,some18,some19,some7,some8,some15,some14,some20,some20],[some17,some16,some19,some18,some8,some7,some14,some15,some20,some20]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some3,some4,some4,some5,some6,some7,some8]\==[some9,some10,some11,some12,some6,some5,some13,some13,some14,some15]"}]
    <#lemma120>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma105> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some3,some4,some5,some6,some6,some7,some8],[[some1,some0,some3,some2,some5,some4,some6,some6,some8,some7],[some9,some10,some11,some12,some13,some14,some8,some7,some15,some15],[some10,some9,some12,some11,some14,some13,some7,some8,some15,some15]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some3,some4,some5,some6,some6,some7,some8]\==[some1,some0,some3,some2,some5,some4,some6,some6,some8,some7]"}]
    <#lemma121>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma106> a r:Inference;
  r:gives {
    "distinct([[some1,some0,some3,some2,some5,some4,some6,some6,some8,some7],[some9,some10,some11,some12,some13,some14,some8,some7,some15,some15],[some10,some9,some12,some11,some14,some13,some7,some8,some15,some15]])".
  };
  r:evidence (
    <#lemma122>
    <#lemma123>
  );
  r:rule [ a r:Fact; r:gives {"distinct([avar0|avar1])" <= {"notin(avar0,avar1)".
    "distinct(avar1)"}}].

<#lemma107> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9,some10,some11,some12,some13,some14,some15,some16,some17,some18],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5),(4,some6),(4,some7),(4,some8),(4,some9),(4,some10),(4,some11),(4,some12),(4,some13),(4,some14),(4,some15),(4,some16),(4,some17),(4,some18)])".
  };
  r:evidence (
    <#lemma124>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma108> a r:Inference;
  r:gives {
    "from_to_acc(1,[20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(20 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 19}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma125>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_106 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_106.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma109> a r:Inference;
  r:gives {
    "total([(4,7),(4,8),(4,9),(4,10),(4,11),(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],84,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(84 {"4*7"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 112}]
    <#lemma126>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_107 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_107.
    "total(avar4,avar0,avar5)"}}].

<#lemma110> a r:Inference;
  r:gives {
    "repeat(10,3,[10,10,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(3 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 2}]
    <#lemma127>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_108 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_108.
    "repeat(avar2,avar0,avar3)"} => {"repeat(avar2,avar1,[avar2|avar3])"}}].

<#lemma111> a r:Inference;
  r:gives {
    "next_partition([(1,3),(7,1)],[(4,1),(6,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"7>2"}]
    [ a r:Fact; r:gives {(7 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 6}]
    [ a r:Fact; r:gives {({"3+7"} 6) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> 4}]
    [ a r:Fact; r:gives {"4>0"}]
    [ a r:Fact; r:gives {({"3+7"} 6) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> 1}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar3),(avar0,1)|avar5],[(avar2,1),(avar1,avar4)|avar5])" <= {"avar0>2" .
    (_:x_0_109 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_1_109.
    ({"avar3+avar0"} _:x_1_109) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> _:x_2_109.
    "avar2>0" .
    ({"avar3+avar0"} _:x_1_109) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> _:x_4_109}}].

<#lemma112> a r:Inference;
  r:gives {
    "generator([(4,1),(6,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma128>
    <#lemma129>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma113> a r:Inference;
  r:gives {
    "list_permute([10,9],[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"nth1(10,[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99])"}]
    <#lemma130>
  );
  r:rule [ a r:Fact; r:gives {"list_permute([avar0|avar3],avar1,[avar2|avar4])" <= {"nth1(avar0,avar1,avar2)".
    "list_permute(avar3,avar1,avar4)"}}].

<#lemma114> a r:Inference;
  r:gives {
    "from_to_acc(1,[4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(4 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 3}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma131>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_112 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_112.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma115> a r:Inference;
  r:gives {
    "notin([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[[some8,some7,some16,some17,some18,some19,some14,some15,some20,some20],[some7,some8,some17,some16,some19,some18,some15,some14,some20,some20]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8]\==[some8,some7,some9,some10,some11,some12,some13,some14,some15,some15]"}]
    <#lemma132>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma116> a r:Inference;
  r:gives {
    "notin([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[[some7,some8,some16,some17,some18,some19,some14,some15,some20,some20],[some8,some7,some17,some16,some19,some18,some15,some14,some20,some20]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8]\==[some7,some8,some9,some10,some11,some12,some13,some14,some15,some15]"}]
    <#lemma133>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma117> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some2,some3,some4,some5,some6,some7,some8],[[some16,some17,some8,some7,some18,some19,some14,some15,some20,some20],[some17,some16,some7,some8,some19,some18,some15,some14,some20,some20]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some2,some3,some4,some5,some6,some7,some8]\==[some9,some10,some8,some7,some11,some12,some13,some14,some15,some15]"}]
    <#lemma134>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma118> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some2,some3,some4,some5,some6,some7,some8],[[some16,some17,some7,some8,some18,some19,some14,some15,some20,some20],[some17,some16,some8,some7,some19,some18,some15,some14,some20,some20]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some2,some3,some4,some5,some6,some7,some8]\==[some9,some10,some7,some8,some11,some12,some13,some14,some15,some15]"}]
    <#lemma135>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma119> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some3,some4,some4,some5,some6,some7,some8],[[some16,some17,some18,some19,some8,some7,some14,some15,some20,some20],[some17,some16,some19,some18,some7,some8,some15,some14,some20,some20]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some3,some4,some4,some5,some6,some7,some8]\==[some9,some10,some11,some12,some8,some7,some13,some14,some15,some15]"}]
    <#lemma136>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma120> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some3,some4,some4,some5,some6,some7,some8],[[some16,some17,some18,some19,some7,some8,some14,some15,some20,some20],[some17,some16,some19,some18,some8,some7,some15,some14,some20,some20]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some3,some4,some4,some5,some6,some7,some8]\==[some9,some10,some11,some12,some7,some8,some13,some14,some15,some15]"}]
    <#lemma137>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma121> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some3,some4,some5,some6,some6,some7,some8],[[some9,some10,some11,some12,some13,some14,some8,some7,some15,some15],[some10,some9,some12,some11,some14,some13,some7,some8,some15,some15]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some3,some4,some5,some6,some6,some7,some8]\==[some9,some10,some11,some12,some13,some14,some8,some7,some15,some15]"}]
    <#lemma138>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma122> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some3,some4,some5,some6,some6,some7,some8],[[some9,some10,some11,some12,some13,some14,some7,some8,some15,some15],[some10,some9,some12,some11,some14,some13,some8,some7,some15,some15]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some3,some4,some5,some6,some6,some7,some8]\==[some9,some10,some11,some12,some13,some14,some7,some8,some15,some15]"}]
    <#lemma139>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma123> a r:Inference;
  r:gives {
    "distinct([[some9,some10,some11,some12,some13,some14,some7,some8,some15,some15],[some10,some9,some12,some11,some14,some13,some8,some7,some15,some15]])".
  };
  r:evidence (
    <#lemma140>
    <#lemma141>
  );
  r:rule [ a r:Fact; r:gives {"distinct([avar0|avar1])" <= {"notin(avar0,avar1)".
    "distinct(avar1)"}}].

<#lemma124> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9,some10,some11,some12,some13,some14,some15,some16,some17],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5),(4,some6),(4,some7),(4,some8),(4,some9),(4,some10),(4,some11),(4,some12),(4,some13),(4,some14),(4,some15),(4,some16),(4,some17)])".
  };
  r:evidence (
    <#lemma142>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma125> a r:Inference;
  r:gives {
    "from_to_acc(1,[19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(19 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 18}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma143>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_123 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_123.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma126> a r:Inference;
  r:gives {
    "total([(4,8),(4,9),(4,10),(4,11),(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],112,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(112 {"4*8"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 144}]
    <#lemma144>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_124 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_124.
    "total(avar4,avar0,avar5)"}}].

<#lemma127> a r:Inference;
  r:gives {
    "repeat(10,2,[10,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(2 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 1}]
    <#lemma145>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_125 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_125.
    "repeat(avar2,avar0,avar3)"} => {"repeat(avar2,avar1,[avar2|avar3])"}}].

<#lemma128> a r:Inference;
  r:gives {
    "next_partition([(4,1),(6,1)],[(1,1),(3,1),(6,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"4>2"}]
    [ a r:Fact; r:gives {(4 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 3}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(avar0,1)|avar2],[(1,1),(avar1,1)|avar2])" <= {"avar0>2" .
    (_:x_0_126 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_1_126}}].

<#lemma129> a r:Inference;
  r:gives {
    "generator([(1,1),(3,1),(6,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma146>
    <#lemma147>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma130> a r:Inference;
  r:gives {
    "list_permute([9],[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"nth1(9,[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89])"}]
    <#lemma148>
  );
  r:rule [ a r:Fact; r:gives {"list_permute([avar0|avar3],avar1,[avar2|avar4])" <= {"nth1(avar0,avar1,avar2)".
    "list_permute(avar3,avar1,avar4)"}}].

<#lemma131> a r:Inference;
  r:gives {
    "from_to_acc(1,[3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(3 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 2}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma149>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_129 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_129.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma132> a r:Inference;
  r:gives {
    "notin([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[[some7,some8,some10,some9,some12,some11,some14,some13,some15,some15]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8]\==[some7,some8,some9,some10,some11,some12,some13,some14,some15,some15]"}]
    <#lemma150>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma133> a r:Inference;
  r:gives {
    "notin([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[[some8,some7,some10,some9,some12,some11,some14,some13,some15,some15]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some0,some1,some2,some3,some4,some5,some6,some7,some8]\==[some8,some7,some9,some10,some11,some12,some13,some14,some15,some15]"}]
    <#lemma150>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma134> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some2,some3,some4,some5,some6,some7,some8],[[some10,some9,some7,some8,some12,some11,some14,some13,some15,some15]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some2,some3,some4,some5,some6,some7,some8]\==[some9,some10,some7,some8,some11,some12,some13,some14,some15,some15]"}]
    <#lemma151>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma135> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some2,some3,some4,some5,some6,some7,some8],[[some10,some9,some8,some7,some12,some11,some14,some13,some15,some15]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some2,some3,some4,some5,some6,some7,some8]\==[some9,some10,some8,some7,some11,some12,some13,some14,some15,some15]"}]
    <#lemma151>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma136> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some3,some4,some4,some5,some6,some7,some8],[[some10,some9,some12,some11,some7,some8,some14,some13,some15,some15]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some3,some4,some4,some5,some6,some7,some8]\==[some9,some10,some11,some12,some7,some8,some13,some14,some15,some15]"}]
    <#lemma152>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma137> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some3,some4,some4,some5,some6,some7,some8],[[some10,some9,some12,some11,some8,some7,some14,some13,some15,some15]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some3,some4,some4,some5,some6,some7,some8]\==[some9,some10,some11,some12,some8,some7,some13,some14,some15,some15]"}]
    <#lemma152>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma138> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some3,some4,some5,some6,some6,some7,some8],[[some10,some9,some12,some11,some14,some13,some7,some8,some15,some15]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some3,some4,some5,some6,some6,some7,some8]\==[some9,some10,some11,some12,some13,some14,some7,some8,some15,some15]"}]
    <#lemma153>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma139> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some3,some4,some5,some6,some6,some7,some8],[[some10,some9,some12,some11,some14,some13,some8,some7,some15,some15]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some3,some4,some5,some6,some6,some7,some8]\==[some9,some10,some11,some12,some13,some14,some8,some7,some15,some15]"}]
    <#lemma153>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma140> a r:Inference;
  r:gives {
    "notin([some0,some1,some2,some3,some4,some5,some6,some7,some8,some8],[[some1,some0,some3,some2,some5,some4,some7,some6,some8,some8]])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"[some0,some1,some2,some3,some4,some5,some6,some7,some8,some8]\==[some1,some0,some3,some2,some5,some4,some7,some6,some8,some8]"}]
    <#lemma154>
  );
  r:rule [ a r:Fact; r:gives {"notin(avar0,[avar1|avar2])" <= {"avar0\==avar1".
    "notin(avar0,avar2)"}}].

<#lemma141> a r:Extraction;
  r:gives {
    "distinct([[some1,some0,some3,some2,some5,some4,some7,some6,some8,some8]])".
  };
  r:because [ a r:Parsing; r:source <>].

<#lemma142> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9,some10,some11,some12,some13,some14,some15,some16],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5),(4,some6),(4,some7),(4,some8),(4,some9),(4,some10),(4,some11),(4,some12),(4,some13),(4,some14),(4,some15),(4,some16)])".
  };
  r:evidence (
    <#lemma155>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma143> a r:Inference;
  r:gives {
    "from_to_acc(1,[18,19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(18 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 17}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma156>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_140 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_140.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma144> a r:Inference;
  r:gives {
    "total([(4,9),(4,10),(4,11),(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],144,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(144 {"4*9"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 180}]
    <#lemma157>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_141 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_141.
    "total(avar4,avar0,avar5)"}}].

<#lemma145> a r:Inference;
  r:gives {
    "repeat(10,1,[10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
  );
  r:rule [ a r:Fact; r:gives {{"repeat(avar0,1,[avar0])"} <= {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}}].

<#lemma146> a r:Inference;
  r:gives {
    "next_partition([(1,1),(3,1),(6,1)],[(2,2),(6,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"3>2"}]
    [ a r:Fact; r:gives {(3 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 2}]
    [ a r:Fact; r:gives {({"1+3"} 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> 0}]
    [ a r:Fact; r:gives {"0=:=0"}]
    [ a r:Fact; r:gives {({"1+3"} 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> 2}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar3),(avar0,1)|avar5],[(avar1,avar4)|avar5])" <= {"avar0>2" .
    (_:x_0_143 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_1_143.
    ({"avar3+avar0"} _:x_1_143) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> _:x_2_143.
    "avar2=:=0" .
    ({"avar3+avar0"} _:x_1_143) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> _:x_4_143}}].

<#lemma147> a r:Inference;
  r:gives {
    "generator([(2,2),(6,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma158>
    <#lemma159>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma148> a r:Extraction;
  r:gives {
    "list_permute([],[[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[some10,some11,some12,some13,some14,some15,some16,some17,some18,some19],[some20,some21,some22,some23,some24,some25,some26,some27,some28,some29],[some30,some31,some32,some33,some34,some35,some36,some37,some38,some39],[some40,some41,some42,some43,some44,some45,some46,some47,some48,some49],[some50,some51,some52,some53,some54,some55,some56,some57,some58,some59],[some60,some61,some62,some63,some64,some65,some66,some67,some68,some69],[some70,some71,some72,some73,some74,some75,some76,some77,some78,some79],[some80,some81,some82,some83,some84,some85,some86,some87,some88,some89],[some90,some91,some92,some93,some94,some95,some96,some97,some98,some99]],[])".
  };
  r:because [ a r:Parsing; r:source <>].

<#lemma149> a r:Inference;
  r:gives {
    "from_to_acc(1,[2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(2 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 1}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma160>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_145 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_145.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma150> a r:Extraction;
  r:gives {
    "notin([some0,some0,some1,some2,some3,some4,some5,some6,some7,some8],[])".
  };
  r:because [ a r:Parsing; r:source <>].

<#lemma151> a r:Extraction;
  r:gives {
    "notin([some0,some1,some2,some2,some3,some4,some5,some6,some7,some8],[])".
  };
  r:because [ a r:Parsing; r:source <>].

<#lemma152> a r:Extraction;
  r:gives {
    "notin([some0,some1,some2,some3,some4,some4,some5,some6,some7,some8],[])".
  };
  r:because [ a r:Parsing; r:source <>].

<#lemma153> a r:Extraction;
  r:gives {
    "notin([some0,some1,some2,some3,some4,some5,some6,some6,some7,some8],[])".
  };
  r:because [ a r:Parsing; r:source <>].

<#lemma154> a r:Extraction;
  r:gives {
    "notin([some0,some1,some2,some3,some4,some5,some6,some7,some8,some8],[])".
  };
  r:because [ a r:Parsing; r:source <>].

<#lemma155> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9,some10,some11,some12,some13,some14,some15],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5),(4,some6),(4,some7),(4,some8),(4,some9),(4,some10),(4,some11),(4,some12),(4,some13),(4,some14),(4,some15)])".
  };
  r:evidence (
    <#lemma161>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma156> a r:Inference;
  r:gives {
    "from_to_acc(1,[17,18,19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(17 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 16}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma162>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_147 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_147.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma157> a r:Inference;
  r:gives {
    "total([(4,10),(4,11),(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],180,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(180 {"4*10"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 220}]
    <#lemma163>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_148 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_148.
    "total(avar4,avar0,avar5)"}}].

<#lemma158> a r:Inference;
  r:gives {
    "next_partition([(2,2),(6,1)],[(1,2),(2,1),(6,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"2>1"}]
    [ a r:Fact; r:gives {(2 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 1}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(2,avar0)|avar2],[(1,2),(2,avar1)|avar2])" <= {"avar0>1" .
    (_:x_0_149 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_1_149}}].

<#lemma159> a r:Inference;
  r:gives {
    "generator([(1,2),(2,1),(6,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma164>
    <#lemma165>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma160> a r:Extraction;
  r:gives {
    "from_to_acc(1,[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10])".
  };
  r:because [ a r:Parsing; r:source <>].

<#lemma161> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9,some10,some11,some12,some13,some14],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5),(4,some6),(4,some7),(4,some8),(4,some9),(4,some10),(4,some11),(4,some12),(4,some13),(4,some14)])".
  };
  r:evidence (
    <#lemma166>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma162> a r:Inference;
  r:gives {
    "from_to_acc(1,[16,17,18,19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(16 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 15}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma167>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_152 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_152.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma163> a r:Inference;
  r:gives {
    "total([(4,11),(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],220,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(220 {"4*11"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 264}]
    <#lemma168>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_153 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_153.
    "total(avar4,avar0,avar5)"}}].

<#lemma164> a r:Inference;
  r:gives {
    "next_partition([(1,2),(2,1),(6,1)],[(1,4),(6,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(2 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 4}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar1),(2,1)|avar2],[(1,avar0)|avar2])" <= {(_:x_1_154 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_154}}].

<#lemma165> a r:Inference;
  r:gives {
    "generator([(1,4),(6,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma169>
    <#lemma170>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma166> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4,4,4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9,some10,some11,some12,some13],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5),(4,some6),(4,some7),(4,some8),(4,some9),(4,some10),(4,some11),(4,some12),(4,some13)])".
  };
  r:evidence (
    <#lemma171>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma167> a r:Inference;
  r:gives {
    "from_to_acc(1,[15,16,17,18,19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(15 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 14}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma172>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_157 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_157.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma168> a r:Inference;
  r:gives {
    "total([(4,12),(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],264,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(264 {"4*12"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 312}]
    <#lemma173>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_158 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_158.
    "total(avar4,avar0,avar5)"}}].

<#lemma169> a r:Inference;
  r:gives {
    "next_partition([(1,4),(6,1)],[(5,2)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"6>2"}]
    [ a r:Fact; r:gives {(6 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 5}]
    [ a r:Fact; r:gives {({"4+6"} 5) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> 0}]
    [ a r:Fact; r:gives {"0=:=0"}]
    [ a r:Fact; r:gives {({"4+6"} 5) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> 2}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar3),(avar0,1)|avar5],[(avar1,avar4)|avar5])" <= {"avar0>2" .
    (_:x_0_159 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_1_159.
    ({"avar3+avar0"} _:x_1_159) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> _:x_2_159.
    "avar2=:=0" .
    ({"avar3+avar0"} _:x_1_159) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> _:x_4_159}}].

<#lemma170> a r:Inference;
  r:gives {
    "generator([(5,2)],[(2,5)])".
  };
  r:evidence (
    <#lemma174>
    <#lemma175>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma171> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4,4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9,some10,some11,some12],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5),(4,some6),(4,some7),(4,some8),(4,some9),(4,some10),(4,some11),(4,some12)])".
  };
  r:evidence (
    <#lemma176>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma172> a r:Inference;
  r:gives {
    "from_to_acc(1,[14,15,16,17,18,19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(14 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 13}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma177>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_162 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_162.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma173> a r:Inference;
  r:gives {
    "total([(4,13),(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],312,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(312 {"4*13"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 364}]
    <#lemma178>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_163 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_163.
    "total(avar4,avar0,avar5)"}}].

<#lemma174> a r:Inference;
  r:gives {
    "next_partition([(5,2)],[(1,1),(4,1),(5,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"5>2"}]
    [ a r:Fact; r:gives {"2>1"}]
    [ a r:Fact; r:gives {(5 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 4}]
    [ a r:Fact; r:gives {(2 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 1}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(avar0,avar1)|avar4],[(1,1),(avar2,1),(avar0,avar3)|avar4])" <= {"avar0>2" .
    "avar1>1" .
    (_:x_0_164 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_2_164.
    (_:x_1_164 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_3_164}}].

<#lemma175> a r:Inference;
  r:gives {
    "generator([(1,1),(4,1),(5,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma179>
    <#lemma180>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma176> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9,some10,some11],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5),(4,some6),(4,some7),(4,some8),(4,some9),(4,some10),(4,some11)])".
  };
  r:evidence (
    <#lemma181>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma177> a r:Inference;
  r:gives {
    "from_to_acc(1,[13,14,15,16,17,18,19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(13 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 12}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma182>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_167 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_167.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma178> a r:Inference;
  r:gives {
    "total([(4,14),(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],364,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(364 {"4*14"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 420}]
    <#lemma183>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_168 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_168.
    "total(avar4,avar0,avar5)"}}].

<#lemma179> a r:Inference;
  r:gives {
    "next_partition([(1,1),(4,1),(5,1)],[(2,1),(3,1),(5,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"4>2"}]
    [ a r:Fact; r:gives {(4 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 3}]
    [ a r:Fact; r:gives {({"1+4"} 3) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> 2}]
    [ a r:Fact; r:gives {"2>0"}]
    [ a r:Fact; r:gives {({"1+4"} 3) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> 1}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar3),(avar0,1)|avar5],[(avar2,1),(avar1,avar4)|avar5])" <= {"avar0>2" .
    (_:x_0_169 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_1_169.
    ({"avar3+avar0"} _:x_1_169) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> _:x_2_169.
    "avar2>0" .
    ({"avar3+avar0"} _:x_1_169) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> _:x_4_169}}].

<#lemma180> a r:Inference;
  r:gives {
    "generator([(2,1),(3,1),(5,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma184>
    <#lemma185>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma181> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9,some10],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5),(4,some6),(4,some7),(4,some8),(4,some9),(4,some10)])".
  };
  r:evidence (
    <#lemma186>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma182> a r:Inference;
  r:gives {
    "from_to_acc(1,[12,13,14,15,16,17,18,19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(12 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 11}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma187>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_172 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_172.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma183> a r:Inference;
  r:gives {
    "total([(4,15),(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],420,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(420 {"4*15"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 480}]
    <#lemma188>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_173 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_173.
    "total(avar4,avar0,avar5)"}}].

<#lemma184> a r:Extraction;
  r:gives {
    "next_partition([(2,1),(3,1),(5,1)],[(1,2),(3,1),(5,1)])".
  };
  r:because [ a r:Parsing; r:source <>].

<#lemma185> a r:Inference;
  r:gives {
    "generator([(1,2),(3,1),(5,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma189>
    <#lemma190>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma186> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5,some6,some7,some8,some9],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5),(4,some6),(4,some7),(4,some8),(4,some9)])".
  };
  r:evidence (
    <#lemma191>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma187> a r:Inference;
  r:gives {
    "from_to_acc(1,[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(11 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 10}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma192>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_176 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_176.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma188> a r:Inference;
  r:gives {
    "total([(4,16),(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],480,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(480 {"4*16"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 544}]
    <#lemma193>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_177 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_177.
    "total(avar4,avar0,avar5)"}}].

<#lemma189> a r:Inference;
  r:gives {
    "next_partition([(1,2),(3,1),(5,1)],[(1,1),(2,2),(5,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"3>2"}]
    [ a r:Fact; r:gives {(3 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 2}]
    [ a r:Fact; r:gives {({"2+3"} 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> 1}]
    [ a r:Fact; r:gives {"1>0"}]
    [ a r:Fact; r:gives {({"2+3"} 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> 2}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar3),(avar0,1)|avar5],[(avar2,1),(avar1,avar4)|avar5])" <= {"avar0>2" .
    (_:x_0_178 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_1_178.
    ({"avar3+avar0"} _:x_1_178) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> _:x_2_178.
    "avar2>0" .
    ({"avar3+avar0"} _:x_1_178) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> _:x_4_178}}].

<#lemma190> a r:Inference;
  r:gives {
    "generator([(1,1),(2,2),(5,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma194>
    <#lemma195>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma191> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5,some6,some7,some8],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5),(4,some6),(4,some7),(4,some8)])".
  };
  r:evidence (
    <#lemma196>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma192> a r:Inference;
  r:gives {
    "from_to_acc(1,[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(10 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 9}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma197>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_181 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_181.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma193> a r:Inference;
  r:gives {
    "total([(4,17),(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],544,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(544 {"4*17"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 612}]
    <#lemma198>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_182 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_182.
    "total(avar4,avar0,avar5)"}}].

<#lemma194> a r:Inference;
  r:gives {
    "next_partition([(1,1),(2,2),(5,1)],[(1,3),(2,1),(5,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"2>1"}]
    [ a r:Fact; r:gives {(1 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 3}]
    [ a r:Fact; r:gives {(2 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 1}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar2),(2,avar0)|avar4],[(1,avar1),(2,avar3)|avar4])" <= {"avar0>1" .
    (_:x_2_183 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_1_183.
    (_:x_0_183 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_3_183}}].

<#lemma195> a r:Inference;
  r:gives {
    "generator([(1,3),(2,1),(5,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma199>
    <#lemma200>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma196> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5,some6,some7],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5),(4,some6),(4,some7)])".
  };
  r:evidence (
    <#lemma201>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma197> a r:Inference;
  r:gives {
    "from_to_acc(1,[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(9 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 8}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma202>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_186 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_186.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma198> a r:Inference;
  r:gives {
    "total([(4,18),(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],612,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(612 {"4*18"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 684}]
    <#lemma203>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_187 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_187.
    "total(avar4,avar0,avar5)"}}].

<#lemma199> a r:Inference;
  r:gives {
    "next_partition([(1,3),(2,1),(5,1)],[(1,5),(5,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(3 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 5}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar1),(2,1)|avar2],[(1,avar0)|avar2])" <= {(_:x_1_188 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_188}}].

<#lemma200> a r:Inference;
  r:gives {
    "generator([(1,5),(5,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma204>
    <#lemma205>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma201> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5,some6],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5),(4,some6)])".
  };
  r:evidence (
    <#lemma206>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma202> a r:Inference;
  r:gives {
    "from_to_acc(1,[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(8 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 7}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma207>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_191 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_191.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma203> a r:Inference;
  r:gives {
    "total([(4,19),(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],684,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(684 {"4*19"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 760}]
    <#lemma208>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_192 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_192.
    "total(avar4,avar0,avar5)"}}].

<#lemma204> a r:Inference;
  r:gives {
    "next_partition([(1,5),(5,1)],[(2,1),(4,2)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"5>2"}]
    [ a r:Fact; r:gives {(5 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 4}]
    [ a r:Fact; r:gives {({"5+5"} 4) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> 2}]
    [ a r:Fact; r:gives {"2>0"}]
    [ a r:Fact; r:gives {({"5+5"} 4) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> 2}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar3),(avar0,1)|avar5],[(avar2,1),(avar1,avar4)|avar5])" <= {"avar0>2" .
    (_:x_0_193 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_1_193.
    ({"avar3+avar0"} _:x_1_193) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> _:x_2_193.
    "avar2>0" .
    ({"avar3+avar0"} _:x_1_193) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> _:x_4_193}}].

<#lemma205> a r:Inference;
  r:gives {
    "generator([(2,1),(4,2)],[(2,5)])".
  };
  r:evidence (
    <#lemma209>
    <#lemma210>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma206> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4,4],[some0,some1,some2,some3,some4,some5],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4),(4,some5)])".
  };
  r:evidence (
    <#lemma211>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma207> a r:Inference;
  r:gives {
    "from_to_acc(1,[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(7 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 6}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma212>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_196 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_196.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma208> a r:Inference;
  r:gives {
    "total([(4,20),(4,21),(4,22),(4,23),(4,24),(4,25)],760,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(760 {"4*20"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 840}]
    <#lemma213>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_197 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_197.
    "total(avar4,avar0,avar5)"}}].

<#lemma209> a r:Extraction;
  r:gives {
    "next_partition([(2,1),(4,2)],[(1,2),(4,2)])".
  };
  r:because [ a r:Parsing; r:source <>].

<#lemma210> a r:Inference;
  r:gives {
    "generator([(1,2),(4,2)],[(2,5)])".
  };
  r:evidence (
    <#lemma214>
    <#lemma215>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma211> a r:Inference;
  r:gives {
    "zip([4,4,4,4,4],[some0,some1,some2,some3,some4],[(4,some0),(4,some1),(4,some2),(4,some3),(4,some4)])".
  };
  r:evidence (
    <#lemma216>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma212> a r:Inference;
  r:gives {
    "from_to_acc(1,[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(6 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 5}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma217>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_200 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_200.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma213> a r:Inference;
  r:gives {
    "total([(4,21),(4,22),(4,23),(4,24),(4,25)],840,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(840 {"4*21"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 924}]
    <#lemma218>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_201 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_201.
    "total(avar4,avar0,avar5)"}}].

<#lemma214> a r:Inference;
  r:gives {
    "next_partition([(1,2),(4,2)],[(3,2),(4,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"4>2"}]
    [ a r:Fact; r:gives {"2>1"}]
    [ a r:Fact; r:gives {(4 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 3}]
    [ a r:Fact; r:gives {({"2+4"} 3) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> 0}]
    [ a r:Fact; r:gives {"0=:=0"}]
    [ a r:Fact; r:gives {({"2+4"} 3) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> 2}]
    [ a r:Fact; r:gives {(2 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 1}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar4),(avar0,avar1)|avar7],[(avar2,avar5),(avar0,avar6)|avar7])" <= {"avar0>2" .
    "avar1>1" .
    (_:x_0_202 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_2_202.
    ({"avar4+avar0"} _:x_2_202) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> _:x_3_202.
    "avar3=:=0" .
    ({"avar4+avar0"} _:x_2_202) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> _:x_5_202.
    (_:x_1_202 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_6_202}}].

<#lemma215> a r:Inference;
  r:gives {
    "generator([(3,2),(4,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma219>
    <#lemma220>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma216> a r:Inference;
  r:gives {
    "zip([4,4,4,4],[some0,some1,some2,some3],[(4,some0),(4,some1),(4,some2),(4,some3)])".
  };
  r:evidence (
    <#lemma221>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma217> a r:Inference;
  r:gives {
    "from_to_acc(1,[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(5 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 4}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma222>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_205 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_205.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma218> a r:Inference;
  r:gives {
    "total([(4,22),(4,23),(4,24),(4,25)],924,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(924 {"4*22"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 1012}]
    <#lemma223>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_206 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_206.
    "total(avar4,avar0,avar5)"}}].

<#lemma219> a r:Inference;
  r:gives {
    "next_partition([(3,2),(4,1)],[(1,1),(2,1),(3,1),(4,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"3>2"}]
    [ a r:Fact; r:gives {"2>1"}]
    [ a r:Fact; r:gives {(3 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 2}]
    [ a r:Fact; r:gives {(2 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 1}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(avar0,avar1)|avar4],[(1,1),(avar2,1),(avar0,avar3)|avar4])" <= {"avar0>2" .
    "avar1>1" .
    (_:x_0_207 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_2_207.
    (_:x_1_207 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_3_207}}].

<#lemma220> a r:Inference;
  r:gives {
    "generator([(1,1),(2,1),(3,1),(4,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma224>
    <#lemma225>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma221> a r:Inference;
  r:gives {
    "zip([4,4,4],[some0,some1,some2],[(4,some0),(4,some1),(4,some2)])".
  };
  r:evidence (
    <#lemma226>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma222> a r:Inference;
  r:gives {
    "from_to_acc(1,[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(4 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 3}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma227>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_210 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_210.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma223> a r:Inference;
  r:gives {
    "total([(4,23),(4,24),(4,25)],1012,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(1012 {"4*23"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 1104}]
    <#lemma228>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_211 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_211.
    "total(avar4,avar0,avar5)"}}].

<#lemma224> a r:Inference;
  r:gives {
    "next_partition([(1,1),(2,1),(3,1),(4,1)],[(1,3),(3,1),(4,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(1 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 3}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar1),(2,1)|avar2],[(1,avar0)|avar2])" <= {(_:x_1_212 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_212}}].

<#lemma225> a r:Inference;
  r:gives {
    "generator([(1,3),(3,1),(4,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma229>
    <#lemma230>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma226> a r:Inference;
  r:gives {
    "zip([4,4],[some0,some1],[(4,some0),(4,some1)])".
  };
  r:evidence (
    <#lemma231>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma227> a r:Inference;
  r:gives {
    "from_to_acc(1,[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(3 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 2}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma232>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_215 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_215.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma228> a r:Inference;
  r:gives {
    "total([(4,24),(4,25)],1104,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(1104 {"4*24"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 1200}]
    <#lemma233>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_216 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_216.
    "total(avar4,avar0,avar5)"}}].

<#lemma229> a r:Inference;
  r:gives {
    "next_partition([(1,3),(3,1),(4,1)],[(2,3),(4,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"3>2"}]
    [ a r:Fact; r:gives {(3 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 2}]
    [ a r:Fact; r:gives {({"3+3"} 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> 0}]
    [ a r:Fact; r:gives {"0=:=0"}]
    [ a r:Fact; r:gives {({"3+3"} 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> 3}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar3),(avar0,1)|avar5],[(avar1,avar4)|avar5])" <= {"avar0>2" .
    (_:x_0_217 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_1_217.
    ({"avar3+avar0"} _:x_1_217) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> _:x_2_217.
    "avar2=:=0" .
    ({"avar3+avar0"} _:x_1_217) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> _:x_4_217}}].

<#lemma230> a r:Inference;
  r:gives {
    "generator([(2,3),(4,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma234>
    <#lemma235>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma231> a r:Inference;
  r:gives {
    "zip([4],[some0],[(4,some0)])".
  };
  r:evidence (
    <#lemma236>
  );
  r:rule [ a r:Fact; r:gives {"zip([avar3|avar0],[avar4|avar1],[(avar3,avar4)|avar2])" <= "zip(avar0,avar1,avar2)"}].

<#lemma232> a r:Inference;
  r:gives {
    "from_to_acc(1,[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(2 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 1}]
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
    <#lemma237>
  );
  r:rule [ a r:Fact; r:gives {{(_:x_1_220 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_0_220.
    ("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true.
    "from_to_acc(avar2,[avar0,avar1|avar3],avar4)"} => "from_to_acc(avar2,[avar1|avar3],avar4)"}].

<#lemma233> a r:Inference;
  r:gives {
    "total([(4,25)],1200,1300)" .
  };
  r:evidence (
    [ a r:Fact; r:gives {(1200 {"4*25"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 1300}]
    <#lemma238>
  );
  r:rule [ a r:Fact; r:gives {"total([(avar2,avar3)|avar4],avar1,avar5)" <= {(_:x_1_221 {"avar2*avar3"}) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_221.
    "total(avar4,avar0,avar5)"}}].

<#lemma234> a r:Inference;
  r:gives {
    "next_partition([(2,3),(4,1)],[(1,2),(2,2),(4,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"3>1"}]
    [ a r:Fact; r:gives {(3 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 2}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(2,avar0)|avar2],[(1,2),(2,avar1)|avar2])" <= {"avar0>1" .
    (_:x_0_222 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_1_222}}].

<#lemma235> a r:Inference;
  r:gives {
    "generator([(1,2),(2,2),(4,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma239>
    <#lemma240>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma236> a r:Inference;
  r:gives {
    "zip([],[],[])".
  };
  r:evidence (
    [ a r:Fact; r:gives {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}]
  );
  r:rule [ a r:Fact; r:gives {"zip([],avar0,[])" <= {("!") <http://eulersharp.sourceforge.net/2003/03swap/log-rules#derive> true}}].

<#lemma237> a r:Extraction;
  r:gives {
    "from_to_acc(1,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])".
  };
  r:because [ a r:Parsing; r:source <>].

<#lemma238> a r:Extraction;
  r:gives {
    "total([],1300,1300)" .
  };
  r:because [ a r:Parsing; r:source <>].

<#lemma239> a r:Inference;
  r:gives {
    "next_partition([(1,2),(2,2),(4,1)],[(1,4),(2,1),(4,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"2>1"}]
    [ a r:Fact; r:gives {(2 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 4}]
    [ a r:Fact; r:gives {(2 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 1}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar2),(2,avar0)|avar4],[(1,avar1),(2,avar3)|avar4])" <= {"avar0>1" .
    (_:x_2_225 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_1_225.
    (_:x_0_225 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_3_225}}].

<#lemma240> a r:Inference;
  r:gives {
    "generator([(1,4),(2,1),(4,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma241>
    <#lemma242>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma241> a r:Inference;
  r:gives {
    "next_partition([(1,4),(2,1),(4,1)],[(1,6),(4,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(4 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 6}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar1),(2,1)|avar2],[(1,avar0)|avar2])" <= {(_:x_1_227 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_227}}].

<#lemma242> a r:Inference;
  r:gives {
    "generator([(1,6),(4,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma243>
    <#lemma244>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma243> a r:Inference;
  r:gives {
    "next_partition([(1,6),(4,1)],[(1,1),(3,3)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"4>2"}]
    [ a r:Fact; r:gives {(4 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 3}]
    [ a r:Fact; r:gives {({"6+4"} 3) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> 1}]
    [ a r:Fact; r:gives {"1>0"}]
    [ a r:Fact; r:gives {({"6+4"} 3) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> 3}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar3),(avar0,1)|avar5],[(avar2,1),(avar1,avar4)|avar5])" <= {"avar0>2" .
    (_:x_0_229 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_1_229.
    ({"avar3+avar0"} _:x_1_229) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> _:x_2_229.
    "avar2>0" .
    ({"avar3+avar0"} _:x_1_229) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> _:x_4_229}}].

<#lemma244> a r:Inference;
  r:gives {
    "generator([(1,1),(3,3)],[(2,5)])".
  };
  r:evidence (
    <#lemma245>
    <#lemma246>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma245> a r:Inference;
  r:gives {
    "next_partition([(1,1),(3,3)],[(2,2),(3,2)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"3>2"}]
    [ a r:Fact; r:gives {"3>1"}]
    [ a r:Fact; r:gives {(3 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 2}]
    [ a r:Fact; r:gives {({"1+3"} 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> 0}]
    [ a r:Fact; r:gives {"0=:=0"}]
    [ a r:Fact; r:gives {({"1+3"} 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> 2}]
    [ a r:Fact; r:gives {(3 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 2}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar4),(avar0,avar1)|avar7],[(avar2,avar5),(avar0,avar6)|avar7])" <= {"avar0>2" .
    "avar1>1" .
    (_:x_0_231 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_2_231.
    ({"avar4+avar0"} _:x_2_231) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> _:x_3_231.
    "avar3=:=0" .
    ({"avar4+avar0"} _:x_2_231) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> _:x_5_231.
    (_:x_1_231 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_6_231}}].

<#lemma246> a r:Inference;
  r:gives {
    "generator([(2,2),(3,2)],[(2,5)])".
  };
  r:evidence (
    <#lemma247>
    <#lemma248>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma247> a r:Inference;
  r:gives {
    "next_partition([(2,2),(3,2)],[(1,2),(2,1),(3,2)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"2>1"}]
    [ a r:Fact; r:gives {(2 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 1}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(2,avar0)|avar2],[(1,2),(2,avar1)|avar2])" <= {"avar0>1" .
    (_:x_0_233 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_1_233}}].

<#lemma248> a r:Inference;
  r:gives {
    "generator([(1,2),(2,1),(3,2)],[(2,5)])".
  };
  r:evidence (
    <#lemma249>
    <#lemma250>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma249> a r:Inference;
  r:gives {
    "next_partition([(1,2),(2,1),(3,2)],[(1,4),(3,2)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(2 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 4}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar1),(2,1)|avar2],[(1,avar0)|avar2])" <= {(_:x_1_235 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_235}}].

<#lemma250> a r:Inference;
  r:gives {
    "generator([(1,4),(3,2)],[(2,5)])".
  };
  r:evidence (
    <#lemma251>
    <#lemma252>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma251> a r:Inference;
  r:gives {
    "next_partition([(1,4),(3,2)],[(1,1),(2,3),(3,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"3>2"}]
    [ a r:Fact; r:gives {"2>1"}]
    [ a r:Fact; r:gives {(3 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 2}]
    [ a r:Fact; r:gives {({"4+3"} 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> 1}]
    [ a r:Fact; r:gives {"1>0"}]
    [ a r:Fact; r:gives {({"4+3"} 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> 3}]
    [ a r:Fact; r:gives {(2 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 1}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar4),(avar0,avar1)|avar7],[(avar3,1),(avar2,avar5),(avar0,avar6)|avar7])" <= {"avar0>2" .
    "avar1>1" .
    (_:x_0_237 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_2_237.
    ({"avar4+avar0"} _:x_2_237) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> _:x_3_237.
    "avar3>0" .
    ({"avar4+avar0"} _:x_2_237) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> _:x_5_237.
    (_:x_1_237 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_6_237}}].

<#lemma252> a r:Inference;
  r:gives {
    "generator([(1,1),(2,3),(3,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma253>
    <#lemma254>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma253> a r:Inference;
  r:gives {
    "next_partition([(1,1),(2,3),(3,1)],[(1,3),(2,2),(3,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"3>1"}]
    [ a r:Fact; r:gives {(1 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 3}]
    [ a r:Fact; r:gives {(3 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 2}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar2),(2,avar0)|avar4],[(1,avar1),(2,avar3)|avar4])" <= {"avar0>1" .
    (_:x_2_239 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_1_239.
    (_:x_0_239 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_3_239}}].

<#lemma254> a r:Inference;
  r:gives {
    "generator([(1,3),(2,2),(3,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma255>
    <#lemma256>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma255> a r:Inference;
  r:gives {
    "next_partition([(1,3),(2,2),(3,1)],[(1,5),(2,1),(3,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"2>1"}]
    [ a r:Fact; r:gives {(3 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 5}]
    [ a r:Fact; r:gives {(2 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 1}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar2),(2,avar0)|avar4],[(1,avar1),(2,avar3)|avar4])" <= {"avar0>1" .
    (_:x_2_241 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_1_241.
    (_:x_0_241 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_3_241}}].

<#lemma256> a r:Inference;
  r:gives {
    "generator([(1,5),(2,1),(3,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma257>
    <#lemma258>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma257> a r:Inference;
  r:gives {
    "next_partition([(1,5),(2,1),(3,1)],[(1,7),(3,1)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {(5 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> 7}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar1),(2,1)|avar2],[(1,avar0)|avar2])" <= {(_:x_1_243 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#plus> _:x_0_243}}].

<#lemma258> a r:Inference;
  r:gives {
    "generator([(1,7),(3,1)],[(2,5)])".
  };
  r:evidence (
    <#lemma259>
    <#lemma260>
  );
  r:rule [ a r:Fact; r:gives {"generator(avar0,avar2)" <= {"next_partition(avar0,avar1)".
    "generator(avar1,avar2)"}}].

<#lemma259> a r:Inference;
  r:gives {
    "next_partition([(1,7),(3,1)],[(2,5)])".
  };
  r:evidence (
    [ a r:Fact; r:gives {"3>2"}]
    [ a r:Fact; r:gives {(3 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> 2}]
    [ a r:Fact; r:gives {({"7+3"} 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> 0}]
    [ a r:Fact; r:gives {"0=:=0"}]
    [ a r:Fact; r:gives {({"7+3"} 2) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> 5}]
  );
  r:rule [ a r:Fact; r:gives {"next_partition([(1,avar3),(avar0,1)|avar5],[(avar1,avar4)|avar5])" <= {"avar0>2" .
    (_:x_0_245 1) <http://eulersharp.sourceforge.net/2003/03swap/prolog#minus> _:x_1_245.
    ({"avar3+avar0"} _:x_1_245) <http://eulersharp.sourceforge.net/2003/03swap/prolog#mod> _:x_2_245.
    "avar2=:=0" .
    ({"avar3+avar0"} _:x_1_245) <http://eulersharp.sourceforge.net/2003/03swap/prolog#integer_quotient> _:x_4_245}}].

<#lemma260> a r:Extraction;
  r:gives {
    "generator([(2,5)],[(2,5)])".
  };
  r:because [ a r:Parsing; r:source <>].

#2019-08-14T11:55:06.701Z in=1 out=1 ent=1 step=1 brake=1 inf=5740983 sec=3.825 inf/sec=1500911
#ENDS

