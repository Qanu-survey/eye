#Processed by Id
        #    using base file:///home/jdroo/github.com/josd/eye/reasoning/glass/.run-1597610120.889806p7989
             @prefix : <http://example.org/try#> .
    @prefix log: <http://www.w3.org/2000/10/swap/log#> .
    @prefix n3: <http://www.w3.org/2004/06/rei#> .
    @prefix pr: <http://www.w3.org/2000/10/swap/reason#> .
    @prefix run: <#> .
    @prefix test: <http://josd.github.io/eye/reasoning/glass/test.n3#> .
    @prefix testQ: <http://josd.github.io/eye/reasoning/glass/testQ.n3#> .
    
     @forSome run:_g0,
                run:_g1,
                run:_g2,
                run:_g3,
                run:_g4,
                run:_g5,
                run:_g6,
                run:_g7,
                run:_g8 .
      [      a pr:Conjunction,
                    pr:Proof;
             pr:component  [
                 a pr:Inference;
                 pr:binding  [
                     pr:boundTo  [
                         n3:uri "http://example.org/try#a" ];
                     pr:variable  [
                         n3:nodeId "http://example.org/try#A" ] ],
                         [
                     pr:boundTo run:_g0;
                     pr:variable  [
                         n3:nodeId "http://josd.github.io/eye/reasoning/glass/testQ.n3#G" ] ];
                 pr:evidence  (
                 [
                         a pr:Fact;
                         pr:gives {{
                            :a     :b :c .
                            
                            }     log:equalTo {:a     :b :c .
                            } .
                        } ]
                 [
                         a pr:Extraction;
                         pr:because run:_g3;
                         pr:gives {{
                            :a     :b :c .
                            
                            }     :p :o .
                        } ] );
                 pr:rule  [
                     a pr:Extraction;
                     pr:because run:_g1;
                     pr:gives { @forAll :A,
                                testQ:G .
                    {
                        testQ:G     :p :o;
                             log:equalTo {:A     :b :c .
                            } .
                        
                        }     => {:test1     a :PASS .
                        } .
                    } ] ],
                     [
                 a pr:Inference;
                 pr:binding  [
                     pr:boundTo  [
                         n3:uri "http://example.org/try#e" ];
                     pr:variable  [
                         n3:nodeId "http://example.org/try#E" ] ],
                         [
                     pr:boundTo run:_g5;
                     pr:variable  [
                         n3:nodeId "http://josd.github.io/eye/reasoning/glass/testQ.n3#G" ] ];
                 pr:evidence  (
                 [
                         a pr:Fact;
                         pr:gives {{
                            :d     :e :f .
                            :r     :s :t .
                            
                            }     log:equalTo {:d     :e :f .
                            :r     :s :t .
                            } .
                        } ]
                 [
                         a pr:Extraction;
                         pr:because run:_g4;
                         pr:gives {{
                            :d     :e :f .
                            :r     :s :t .
                            
                            }     :p :o .
                        } ] );
                 pr:rule  [
                     a pr:Extraction;
                     pr:because run:_g1;
                     pr:gives { @forAll :E,
                                testQ:G .
                    {
                        testQ:G     :p :o;
                             log:equalTo {:d     :E :f .
                            :r     :s :t .
                            } .
                        
                        }     => {:test6     a :PASS .
                        } .
                    } ] ],
                     [
                 a pr:Inference;
                 pr:binding  [
                     pr:boundTo  [
                         n3:uri "http://example.org/try#s" ];
                     pr:variable  [
                         n3:nodeId "http://example.org/try#S" ] ],
                         [
                     pr:boundTo run:_g6;
                     pr:variable  [
                         n3:nodeId "http://josd.github.io/eye/reasoning/glass/testQ.n3#G" ] ];
                 pr:evidence  (
                 [
                         a pr:Fact;
                         pr:gives {{
                            :d     :e :f .
                            :r     :s :t .
                            
                            }     log:equalTo {:d     :e :f .
                            :r     :s :t .
                            } .
                        } ]
                 [
                         a pr:Extraction;
                         pr:because run:_g4;
                         pr:gives {{
                            :d     :e :f .
                            :r     :s :t .
                            
                            }     :p :o .
                        } ] );
                 pr:rule  [
                     a pr:Extraction;
                     pr:because run:_g1;
                     pr:gives { @forAll :S,
                                testQ:G .
                    {
                        testQ:G     :p :o;
                             log:equalTo {:d     :e :f .
                            :r     :S :t .
                            } .
                        
                        }     => {:test5     a :PASS .
                        } .
                    } ] ],
                     [
                 a pr:Inference;
                 pr:binding  [
                     pr:boundTo  [
                         n3:uri "http://example.org/try#c" ];
                     pr:variable  [
                         n3:nodeId "http://example.org/try#C" ] ],
                         [
                     pr:boundTo  [
                         n3:uri "http://example.org/try#b" ];
                     pr:variable  [
                         n3:nodeId "http://example.org/try#B" ] ],
                         [
                     pr:boundTo run:_g7;
                     pr:variable  [
                         n3:nodeId "http://josd.github.io/eye/reasoning/glass/testQ.n3#G" ] ];
                 pr:evidence  (
                 [
                         a pr:Fact;
                         pr:gives {{
                            :a     :b :c .
                            
                            }     log:equalTo {:a     :b :c .
                            } .
                        } ]
                 [
                         a pr:Extraction;
                         pr:because run:_g3;
                         pr:gives {{
                            :a     :b :c .
                            
                            }     :p :o .
                        } ] );
                 pr:rule  [
                     a pr:Extraction;
                     pr:because run:_g1;
                     pr:gives { @forAll :B,
                                :C,
                                testQ:G .
                    {
                        testQ:G     :p :o;
                             log:equalTo {:a     :B :C .
                            } .
                        
                        }     => {:test2     a :PASS .
                        } .
                    } ] ],
                     [
                 a pr:Inference;
                 pr:binding  [
                     pr:boundTo  [
                         n3:uri "http://example.org/try#s" ];
                     pr:variable  [
                         n3:nodeId "http://example.org/try#S" ] ],
                         [
                     pr:boundTo run:_g8;
                     pr:variable  [
                         n3:nodeId "http://josd.github.io/eye/reasoning/glass/testQ.n3#G" ] ];
                 pr:evidence  (
                 [
                         a pr:Fact;
                         pr:gives {{
                            :r     :s :t .
                            
                            }     log:equalTo {:r     :s :t .
                            } .
                        } ]
                 [
                         a pr:Extraction;
                         pr:because run:_g4;
                         pr:gives {{
                            :r     :s :t .
                            
                            }     :p :o .
                        } ] );
                 pr:rule  [
                     a pr:Extraction;
                     pr:because run:_g1;
                     pr:gives { @forAll :S,
                                testQ:G .
                    {
                        testQ:G     :p :o;
                             log:equalTo {:r     :S :t .
                            } .
                        
                        }     => {:test4     a :PASS .
                        } .
                    } ] ];
             pr:gives {:test1     a :PASS .
            :test2     a :PASS .
            :test4     a :PASS .
            :test5     a :PASS .
            :test6     a :PASS .
            } ].
    
    run:_g1     a pr:Parsing;
         pr:because run:_g2;
         pr:source <http://josd.github.io/eye/reasoning/glass/testQ.n3> .
    
    run:_g2     a pr:CommandLine;
         pr:args "['/home/jdroo/github.com/linkeddata/swap/cwm.py', 'http://josd.github.io/eye/reasoning/glass/test.n3', '--think', '--filter=http://josd.github.io/eye/reasoning/glass/testQ.n3', '--why']" .
    
    run:_g3     a pr:Inference;
         pr:binding  [
             pr:boundTo  [
                 n3:uri "http://example.org/try#b" ];
             pr:variable  [
                 n3:nodeId "http://josd.github.io/eye/reasoning/glass/test.n3#b" ] ];
         pr:evidence  (
         [
                 a pr:Fact;
                 pr:gives {:b     log:equalTo :b .
                } ] );
         pr:rule  [
             a pr:Extraction;
             pr:because run:_g4;
             pr:gives { @forAll test:b .
            {
                test:b     log:equalTo :b .
                
                }     => {{
                    :a     test:b :c .
                    
                    }     :p :o .
                } .
            } ] .
    
    run:_g4     a pr:Parsing;
         pr:because run:_g2;
         pr:source <http://josd.github.io/eye/reasoning/glass/test.n3> .
    {
        :a     :b :c .
        
        }     = run:_g0,
                run:_g7 .
    {
        :r     :s :t .
        
        }     = run:_g8 .
    {
        :d     :e :f .
        :r     :s :t .
        
        }     = run:_g5,
                run:_g6 .
    
