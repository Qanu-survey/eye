PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX math: <http://www.w3.org/2000/10/swap/math#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX : <http://josd.github.io/eye/resources#>

[] :bell-integral "integrate(exp(-x**2), (x, -oo, oo)) = sqrt(pi)".

#ENDS http://josd.github.io/eye/brain/bell.n3 [1 triples] [3 steps/0.5868570804595947 sec]
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX math: <http://www.w3.org/2000/10/swap/math#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX : <http://josd.github.io/eye/resources#>

[] :easter-date "2019-04-21"^^xsd:date.
[] :easter-date "2020-04-12"^^xsd:date.
[] :easter-date "2021-04-04"^^xsd:date.
[] :easter-date "2022-04-17"^^xsd:date.
[] :easter-date "2023-04-09"^^xsd:date.
[] :easter-date "2024-03-31"^^xsd:date.
[] :easter-date "2025-04-20"^^xsd:date.
[] :easter-date "2026-04-05"^^xsd:date.
[] :easter-date "2027-03-28"^^xsd:date.
[] :easter-date "2028-04-16"^^xsd:date.
[] :easter-date "2029-04-01"^^xsd:date.
[] :easter-date "2030-04-21"^^xsd:date.
[] :easter-date "2031-04-13"^^xsd:date.
[] :easter-date "2032-03-28"^^xsd:date.
[] :easter-date "2033-04-17"^^xsd:date.
[] :easter-date "2034-04-09"^^xsd:date.
[] :easter-date "2035-03-25"^^xsd:date.
[] :easter-date "2036-04-13"^^xsd:date.
[] :easter-date "2037-04-05"^^xsd:date.
[] :easter-date "2038-04-25"^^xsd:date.
[] :easter-date "2039-04-10"^^xsd:date.

#ENDS http://josd.github.io/eye/brain/easter.n3 [21 triples] [43 steps/0.4739410877227783 sec]
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX math: <http://www.w3.org/2000/10/swap/math#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX : <http://josd.github.io/eye/resources/einstein#>

:german :eats :fish.

#ENDS http://josd.github.io/eye/brain/einstein.n3 [18 triples] [191 steps/0.7594523429870605 sec]
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX math: <http://www.w3.org/2000/10/swap/math#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX : <http://josd.github.io/eye/resources#>

[] :euler-identity "E**(I*pi) + 1 = 0".

#ENDS http://josd.github.io/eye/brain/euler.n3 [1 triples] [3 steps/0.4630768299102783 sec]
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX math: <http://www.w3.org/2000/10/swap/math#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX : <http://josd.github.io/eye/resources#>

[] :fibonacci-number "fibonacci(0) = 1".
[] :fibonacci-number "fibonacci(91) = 7540113804746346429".
[] :fibonacci-number "fibonacci(283) = 100694286476841731898333719576864360661213863366454327287613".

#ENDS http://josd.github.io/eye/brain/fibonacci.n3 [3 triples] [7 steps/0.46720218658447266 sec]
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX math: <http://www.w3.org/2000/10/swap/math#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX : <http://josd.github.io/eye/resources/graph#>

:case001 :instantiate (:takeRoad :Lemans :Angers).
:case001 :instantiate (:takeRoad :Lemans :Tours).

#ENDS http://josd.github.io/eye/brain/graph.n3 [16 triples] [61 steps/0.5417747497558594 sec]
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX math: <http://www.w3.org/2000/10/swap/math#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX : <http://josd.github.io/eye/resources/graph#>

:Angers :path :Nantes.
:Lemans :path :Nantes.
:Chartres :path :Nantes.
:Paris :path :Nantes.

#ENDS http://josd.github.io/eye/brain/grapht.n3 [14 triples] [101 steps/0.549933910369873 sec]
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX math: <http://www.w3.org/2000/10/swap/math#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX : <http://josd.github.io/eye/resources#>

[] :grover-algorithm "grover(7_bits, alternating_bits_oracle) = (1 0 1 0 1 0 1)".

#ENDS http://josd.github.io/eye/brain/grover.n3 [1 triples] [3 steps/0.5084054470062256 sec]
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX math: <http://www.w3.org/2000/10/swap/math#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX : <http://josd.github.io/eye/resources/list#>

:a :in (:a :b :c :d :e :f :g).
:b :in (:a :b :c :d :e :f :g).
:c :in (:a :b :c :d :e :f :g).
:d :in (:a :b :c :d :e :f :g).
:e :in (:a :b :c :d :e :f :g).
:f :in (:a :b :c :d :e :f :g).
:g :in (:a :b :c :d :e :f :g).

:g :last (:a :b :c :d :e :f :g).

(:a :b :c :d :e :f :g) :length 7.0.

((:a :b :c) (:d :e :f :g)) :sum (:a :b :c :d :e :f :g).

((:a :b :c :d :e :f :g) (:g :f :b :e)) :difference (:a :c :d).

#ENDS http://josd.github.io/eye/brain/list.n3 [13 triples] [218 steps/0.5012564659118652 sec]
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX math: <http://www.w3.org/2000/10/swap/math#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX : <http://josd.github.io/eye/resources/socrates#>

:Socrates a :Mortal.
:Tim a :Mortal.

#ENDS http://josd.github.io/eye/brain/socrates.n3 [3 triples] [8 steps/0.4816098213195801 sec]
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX math: <http://www.w3.org/2000/10/swap/math#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX : <http://josd.github.io/eye/resources/tree#>

:Frans :ancestor :Jos.
:Frans :ancestor :Goedele.
:Frans :ancestor :Veerle.
:Frans :ancestor :Nele.
:Frans :ancestor :Karel.

:Veerle :descendant :Jos.
:Veerle :descendant :Maaike.
:Veerle :descendant :Frans.
:Veerle :descendant :Maria.

#ENDS http://josd.github.io/eye/brain/tree.n3 [16 triples] [341 steps/0.4685988426208496 sec]
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX math: <http://www.w3.org/2000/10/swap/math#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX list: <http://www.w3.org/2000/10/swap/list#>
PREFIX : <http://josd.github.io/eye/resources/xanthippe#>

:Xanthippe a (:Mortal :Woman).

#ENDS http://josd.github.io/eye/brain/xanthippe.n3 [5 triples] [26 steps/0.4683051109313965 sec]
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX math: <http://www.w3.org/2000/10/swap/math#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

(:Ann :ChildAge) rpo:mu 0.4167000000000005.
(:Ann :AdultAge) rpo:mu 0.5832999999999995.
(:Ann :NormalIntraocularPressure) rpo:mu 0.27777777777777735.
(:Ann :IncreasedIntraocularPressure) rpo:mu 0.7222222222222227.
(:Ann :ChildAgeAndIncreasedIntraocularPressure) rpo:mu 0.4167000000000005.
(:Ann :AdultAgeOrIncreasedIntraocularPressure) rpo:mu 0.7222222222222227.
(:Ann :NonIncreasedIntraocularPressure) rpo:mu 0.27777777777777735.

#ENDS http://www.agfa.com/w3c/euler/example003P.n3 [72 triples] [369 steps/0.1370241641998291 sec]
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX math: <http://www.w3.org/2000/10/swap/math#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

:Ann :isPrescribed :aspirin.

#ENDS http://www.agfa.com/w3c/euler/medI.n3 [65 triples] [52 steps/0.11673641204833984 sec]
# main of bell.py
bell_integral = 'integrate(exp(-x**2), (x, -oo, oo)) = sqrt(pi)'

Usage: eye.py [--why] [--once] [--debug] triples
# main of colors.py
map_coloring_europe = {'Slovakia': 'red', 'Romania': 'red', 'Ireland': 'red', 'Lithuania': 'red', 'Greece': 'red', 'Belgium': 'red', 'Cyprus': 'green', 'Latvia': 'green', 'Czech Republic': 'green', 'Italy': 'red', 'France': 'green', 'United Kingdom': 'blue', 'Malta': 'red', 'Germany': 'blue', 'Austria': 'yellow', 'Finland': 'red', 'Poland': 'yellow', 'Hungary': 'green', 'Slovenia': 'blue', 'Denmark': 'red', 'Luxemburg': 'yellow', 'Spain': 'red', 'Bulgaria': 'green', 'Netherlands': 'green', 'Estonia': 'blue', 'Croatia': 'red', 'Portugal': 'green', 'Sweden': 'green'}

# main of easter.py
easter_2019 = '2019-04-21'
easter_2020 = '2020-04-12'
easter_2021 = '2021-04-04'
easter_2022 = '2022-04-17'
easter_2023 = '2023-04-09'
easter_2024 = '2024-03-31'
easter_2025 = '2025-04-20'
easter_2026 = '2026-04-05'
easter_2027 = '2027-03-28'
easter_2028 = '2028-04-16'
easter_2029 = '2029-04-01'
easter_2030 = '2030-04-21'
easter_2031 = '2031-04-13'
easter_2032 = '2032-03-28'
easter_2033 = '2033-04-17'
easter_2034 = '2034-04-09'
easter_2035 = '2035-03-25'
easter_2036 = '2036-04-13'
easter_2037 = '2037-04-05'
easter_2038 = '2038-04-25'
easter_2039 = '2039-04-10'

# main of euler.py
euler_identity = 'E**(I*pi) + 1 = 0'

# main of fibonacci.py
fibonacci_0 = 1
fibonacci_91 = 7540113804746346429
fibonacci_283 = 100694286476841731898333719576864360661213863366454327287613
fibonacci_3674 = 478732505303741385956404162345269858384744735877591245220155181425222583719052883909137058464486031445386821306651407715721324734656496647251457053851886221494227919117922121762759445109056363435769661016283973874009882426095042125170050552506439407003348815544330761584079400325135461550678193524079378861491450704396020972430999793292403017017483898367294476621937943974773294482313564414351612321712688966195460106059438547323207823437792403822551858544397854438499290008848427283999904470627694790572621142059740582469261837684610332863779365142229925216465377941388168082326549704808165258917845248614898837975480724751326240969762853171535705139586476456245058479704158211017314959533704159600834523154440762497873004614783236902025322702458152051015280133424450

# main of grover.py
grover_7_alternating_bits_oracle = [1, 0, 1, 0, 1, 0, 1]

# main of lee.py
lee_map_1 = [[2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [2, 1, None, None, None, None, None, None, None, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [5, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [6, 5, 6, 7, 8, 9, None, None, None, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [7, 6, 7, 8, 9, 10, None, None, None, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [8, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [9, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [10, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [11, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [12, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [13, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [14, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [15, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [16, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [17, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [18, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [19, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]]
lee_path_1 = [(9, 6), (9, 5), (9, 4), (9, 3), (9, 2), (9, 1), (8, 1), (7, 1), (6, 1), (5, 1), (4, 1), (3, 1), (2, 1), (1, 1)]

# main of queens.py
nqueen_8 = [(0, 4, 7, 5, 2, 6, 1, 3), (0, 5, 7, 2, 6, 3, 1, 4), (0, 6, 3, 5, 7, 1, 4, 2), (0, 6, 4, 7, 1, 3, 5, 2), (1, 3, 5, 7, 2, 0, 6, 4), (1, 4, 6, 0, 2, 7, 5, 3), (1, 4, 6, 3, 0, 7, 5, 2), (1, 5, 0, 6, 3, 7, 2, 4), (1, 5, 7, 2, 0, 3, 6, 4), (1, 6, 2, 5, 7, 4, 0, 3), (1, 6, 4, 7, 0, 3, 5, 2), (1, 7, 5, 0, 2, 4, 6, 3), (2, 0, 6, 4, 7, 1, 3, 5), (2, 4, 1, 7, 0, 6, 3, 5), (2, 4, 1, 7, 5, 3, 6, 0), (2, 4, 6, 0, 3, 1, 7, 5), (2, 4, 7, 3, 0, 6, 1, 5), (2, 5, 1, 4, 7, 0, 6, 3), (2, 5, 1, 6, 0, 3, 7, 4), (2, 5, 1, 6, 4, 0, 7, 3), (2, 5, 3, 0, 7, 4, 6, 1), (2, 5, 3, 1, 7, 4, 6, 0), (2, 5, 7, 0, 3, 6, 4, 1), (2, 5, 7, 0, 4, 6, 1, 3), (2, 5, 7, 1, 3, 0, 6, 4), (2, 6, 1, 7, 4, 0, 3, 5), (2, 6, 1, 7, 5, 3, 0, 4), (2, 7, 3, 6, 0, 5, 1, 4), (3, 0, 4, 7, 1, 6, 2, 5), (3, 0, 4, 7, 5, 2, 6, 1), (3, 1, 4, 7, 5, 0, 2, 6), (3, 1, 6, 2, 5, 7, 0, 4), (3, 1, 6, 2, 5, 7, 4, 0), (3, 1, 6, 4, 0, 7, 5, 2), (3, 1, 7, 4, 6, 0, 2, 5), (3, 1, 7, 5, 0, 2, 4, 6), (3, 5, 0, 4, 1, 7, 2, 6), (3, 5, 7, 1, 6, 0, 2, 4), (3, 5, 7, 2, 0, 6, 4, 1), (3, 6, 0, 7, 4, 1, 5, 2), (3, 6, 2, 7, 1, 4, 0, 5), (3, 6, 4, 1, 5, 0, 2, 7), (3, 6, 4, 2, 0, 5, 7, 1), (3, 7, 0, 2, 5, 1, 6, 4), (3, 7, 0, 4, 6, 1, 5, 2), (3, 7, 4, 2, 0, 6, 1, 5), (4, 0, 3, 5, 7, 1, 6, 2), (4, 0, 7, 3, 1, 6, 2, 5), (4, 0, 7, 5, 2, 6, 1, 3), (4, 1, 3, 5, 7, 2, 0, 6), (4, 1, 3, 6, 2, 7, 5, 0), (4, 1, 5, 0, 6, 3, 7, 2), (4, 1, 7, 0, 3, 6, 2, 5), (4, 2, 0, 5, 7, 1, 3, 6), (4, 2, 0, 6, 1, 7, 5, 3), (4, 2, 7, 3, 6, 0, 5, 1), (4, 6, 0, 2, 7, 5, 3, 1), (4, 6, 0, 3, 1, 7, 5, 2), (4, 6, 1, 3, 7, 0, 2, 5), (4, 6, 1, 5, 2, 0, 3, 7), (4, 6, 1, 5, 2, 0, 7, 3), (4, 6, 3, 0, 2, 7, 5, 1), (4, 7, 3, 0, 2, 5, 1, 6), (4, 7, 3, 0, 6, 1, 5, 2), (5, 0, 4, 1, 7, 2, 6, 3), (5, 1, 6, 0, 2, 4, 7, 3), (5, 1, 6, 0, 3, 7, 4, 2), (5, 2, 0, 6, 4, 7, 1, 3), (5, 2, 0, 7, 3, 1, 6, 4), (5, 2, 0, 7, 4, 1, 3, 6), (5, 2, 4, 6, 0, 3, 1, 7), (5, 2, 4, 7, 0, 3, 1, 6), (5, 2, 6, 1, 3, 7, 0, 4), (5, 2, 6, 1, 7, 4, 0, 3), (5, 2, 6, 3, 0, 7, 1, 4), (5, 3, 0, 4, 7, 1, 6, 2), (5, 3, 1, 7, 4, 6, 0, 2), (5, 3, 6, 0, 2, 4, 1, 7), (5, 3, 6, 0, 7, 1, 4, 2), (5, 7, 1, 3, 0, 6, 4, 2), (6, 0, 2, 7, 5, 3, 1, 4), (6, 1, 3, 0, 7, 4, 2, 5), (6, 1, 5, 2, 0, 3, 7, 4), (6, 2, 0, 5, 7, 4, 1, 3), (6, 2, 7, 1, 4, 0, 5, 3), (6, 3, 1, 4, 7, 0, 2, 5), (6, 3, 1, 7, 5, 0, 2, 4), (6, 4, 2, 0, 5, 7, 1, 3), (7, 1, 3, 0, 6, 4, 2, 5), (7, 1, 4, 2, 0, 6, 3, 5), (7, 2, 0, 5, 1, 4, 6, 3), (7, 3, 0, 2, 5, 1, 6, 4)]

# main of sudoku.py
sudoku_201906 = [[8, 1, 3, 4, 2, 5, 7, 9, 6], [6, 2, 4, 8, 9, 7, 3, 5, 1], [5, 7, 9, 6, 1, 3, 8, 4, 2], [4, 3, 7, 2, 8, 9, 6, 1, 5], [2, 8, 6, 3, 5, 1, 4, 7, 9], [1, 9, 5, 7, 6, 4, 2, 3, 8], [9, 4, 2, 5, 3, 8, 1, 6, 7], [7, 5, 8, 1, 4, 6, 9, 2, 3], [3, 6, 1, 9, 7, 2, 5, 8, 4]]
sudoku_201907 = [[4, 3, 9, 7, 6, 8, 5, 1, 2], [6, 8, 7, 2, 1, 5, 9, 4, 3], [5, 2, 1, 4, 9, 3, 8, 7, 6], [1, 7, 8, 9, 2, 4, 3, 6, 5], [2, 6, 3, 5, 8, 1, 7, 9, 4], [9, 4, 5, 3, 7, 6, 1, 2, 8], [3, 1, 4, 6, 5, 9, 2, 8, 7], [8, 5, 2, 1, 4, 7, 6, 3, 9], [7, 9, 6, 8, 3, 2, 4, 5, 1]]
sudoku_201909 = [[3, 4, 8, 6, 1, 9, 7, 2, 5], [5, 1, 2, 8, 7, 4, 3, 6, 9], [7, 9, 6, 3, 5, 2, 4, 1, 8], [4, 6, 7, 1, 9, 3, 8, 5, 2], [8, 3, 9, 2, 6, 5, 1, 4, 7], [1, 2, 5, 7, 4, 8, 6, 9, 3], [6, 5, 1, 9, 3, 7, 2, 8, 4], [2, 7, 4, 5, 8, 6, 9, 3, 1], [9, 8, 3, 4, 2, 1, 5, 7, 6]]
sudoku_201910 = [[3, 4, 1, 8, 6, 9, 7, 2, 5], [5, 2, 6, 4, 1, 7, 3, 8, 9], [9, 7, 8, 2, 3, 5, 6, 4, 1], [1, 8, 7, 6, 5, 2, 9, 3, 4], [4, 6, 5, 1, 9, 3, 2, 7, 8], [2, 3, 9, 7, 4, 8, 5, 1, 6], [6, 9, 2, 3, 8, 1, 4, 5, 7], [7, 1, 4, 5, 2, 6, 8, 9, 3], [8, 5, 3, 9, 7, 4, 1, 6, 2]]

